[
    33mThe CJS build of Vite's Node API is deprecated. See https: //vite.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated for more details.[39m
    {
        "numTotalTestSuites": 254,
        "numPassedTestSuites": 250,
        "numFailedTestSuites": 4,
        "numPendingTestSuites": 0,
        "numTotalTests": 544,
        "numPassedTests": 495,
        "numFailedTests": 1,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "snapshot": {
            "added": 0,
            "failure": false,
            "filesAdded": 0,
            "filesRemoved": 0,
            "filesRemovedList": [],
            "filesUnmatched": 0,
            "filesUpdated": 0,
            "matched": 0,
            "total": 0,
            "unchecked": 0,
            "uncheckedKeysByFile": [],
            "unmatched": 0,
            "updated": 0,
            "didUpdate": false
        },
        "startTime": 1751633501321,
        "success": false,
        "testResults": [
            {
                "assertionResults": [],
                "startTime": 1751633501321,
                "endTime": 1751633501321,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/src/middleware/__tests__/pathTraversalFix.test.ts"
            },
            {
                "assertionResults": [],
                "startTime": 1751633501321,
                "endTime": 1751633501321,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/src/middleware/__tests__/rawUrlTest.test.ts"
            },
            {
                "assertionResults": [],
                "startTime": 1751633501321,
                "endTime": 1751633501321,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/src/middleware/__tests__/realisticSecurityTests.test.ts"
            },
            {
                "assertionResults": [],
                "startTime": 1751633501321,
                "endTime": 1751633501321,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/src/middleware/__tests__/staticFileSecurityMiddleware.test.ts"
            },
            {
                "assertionResults": [],
                "startTime": 1751633501321,
                "endTime": 1751633501321,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/src/routes/__tests__/mediaUnit.test.ts"
            },
            {
                "assertionResults": [],
                "startTime": 1751633501321,
                "endTime": 1751633501321,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/src/routes/__tests__/mediaUpload.test.ts"
            },
            {
                "assertionResults": [],
                "startTime": 1751633501321,
                "endTime": 1751633501321,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/src/routes/__tests__/staticFileServingSecurity.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "register",
                            "Successful Registration"
                        ],
                        "fullName": "AuthController register Successful Registration should register user successfully",
                        "status": "passed",
                        "title": "should register user successfully",
                        "duration": 5.784699999999987,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "register",
                            "Validation Errors"
                        ],
                        "fullName": "AuthController register Validation Errors should return 400 for invalid registration data",
                        "status": "passed",
                        "title": "should return 400 for invalid registration data",
                        "duration": 1.1377000000000521,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "register",
                            "Validation Errors"
                        ],
                        "fullName": "AuthController register Validation Errors should handle empty request body",
                        "status": "passed",
                        "title": "should handle empty request body",
                        "duration": 0.6807999999999765,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "register",
                            "User Already Exists"
                        ],
                        "fullName": "AuthController register User Already Exists should return 409 when email already exists",
                        "status": "passed",
                        "title": "should return 409 when email already exists",
                        "duration": 0.7352999999999952,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "register",
                            "User Already Exists"
                        ],
                        "fullName": "AuthController register User Already Exists should return 409 when username already exists",
                        "status": "passed",
                        "title": "should return 409 when username already exists",
                        "duration": 0.9812999999999761,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "register",
                            "Server Errors"
                        ],
                        "fullName": "AuthController register Server Errors should return 500 when password hashing fails",
                        "status": "passed",
                        "title": "should return 500 when password hashing fails",
                        "duration": 1.102299999999957,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "register",
                            "Server Errors"
                        ],
                        "fullName": "AuthController register Server Errors should return 500 when user creation fails",
                        "status": "passed",
                        "title": "should return 500 when user creation fails",
                        "duration": 0.6907999999999674,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "register",
                            "Server Errors"
                        ],
                        "fullName": "AuthController register Server Errors should return 500 when token generation fails",
                        "status": "passed",
                        "title": "should return 500 when token generation fails",
                        "duration": 0.7898000000000138,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "login",
                            "Successful Login"
                        ],
                        "fullName": "AuthController login Successful Login should login user successfully",
                        "status": "passed",
                        "title": "should login user successfully",
                        "duration": 1.0791999999999575,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "login",
                            "Validation Errors"
                        ],
                        "fullName": "AuthController login Validation Errors should return 400 for invalid login data",
                        "status": "passed",
                        "title": "should return 400 for invalid login data",
                        "duration": 0.7524999999999977,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "login",
                            "Validation Errors"
                        ],
                        "fullName": "AuthController login Validation Errors should handle empty login request",
                        "status": "passed",
                        "title": "should handle empty login request",
                        "duration": 0.6936000000000035,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "login",
                            "Authentication Errors"
                        ],
                        "fullName": "AuthController login Authentication Errors should return 401 when user does not exist",
                        "status": "passed",
                        "title": "should return 401 when user does not exist",
                        "duration": 0.7220000000000368,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "login",
                            "Authentication Errors"
                        ],
                        "fullName": "AuthController login Authentication Errors should return 401 when password is incorrect",
                        "status": "passed",
                        "title": "should return 401 when password is incorrect",
                        "duration": 0.6847000000000207,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "login",
                            "Server Errors"
                        ],
                        "fullName": "AuthController login Server Errors should return 500 when database lookup fails",
                        "status": "passed",
                        "title": "should return 500 when database lookup fails",
                        "duration": 0.6557999999999993,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "login",
                            "Server Errors"
                        ],
                        "fullName": "AuthController login Server Errors should return 500 when password verification fails",
                        "status": "passed",
                        "title": "should return 500 when password verification fails",
                        "duration": 0.7321000000000026,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "logout"
                        ],
                        "fullName": "AuthController logout should logout user successfully",
                        "status": "passed",
                        "title": "should logout user successfully",
                        "duration": 0.6820999999999913,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "logout"
                        ],
                        "fullName": "AuthController logout should handle logout errors gracefully",
                        "status": "passed",
                        "title": "should handle logout errors gracefully",
                        "duration": 1.1555999999999926,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "getCurrentUser",
                            "Successful User Retrieval"
                        ],
                        "fullName": "AuthController getCurrentUser Successful User Retrieval should return current user profile",
                        "status": "passed",
                        "title": "should return current user profile",
                        "duration": 0.7080000000000268,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "getCurrentUser",
                            "User Not Found"
                        ],
                        "fullName": "AuthController getCurrentUser User Not Found should return 404 when user does not exist",
                        "status": "passed",
                        "title": "should return 404 when user does not exist",
                        "duration": 0.7918999999999983,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "getCurrentUser",
                            "Server Errors"
                        ],
                        "fullName": "AuthController getCurrentUser Server Errors should return 500 when database lookup fails",
                        "status": "passed",
                        "title": "should return 500 when database lookup fails",
                        "duration": 1.5819999999999936,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthController",
                            "getCurrentUser",
                            "Server Errors"
                        ],
                        "fullName": "AuthController getCurrentUser Server Errors should handle missing user ID in request",
                        "status": "passed",
                        "title": "should handle missing user ID in request",
                        "duration": 0.5966999999999985,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633503044,
                "endTime": 1751633503068.5967,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/controllers/AuthController.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "followUser Business Logic"
                        ],
                        "fullName": "FollowController Business Logic Tests followUser Business Logic should successfully follow a user with valid authentication",
                        "status": "passed",
                        "title": "should successfully follow a user with valid authentication",
                        "duration": 8.232700000000023,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "followUser Business Logic"
                        ],
                        "fullName": "FollowController Business Logic Tests followUser Business Logic should handle external ActivityPub actor follow without authentication",
                        "status": "passed",
                        "title": "should handle external ActivityPub actor follow without authentication",
                        "duration": 2.4162000000000035,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "followUser Business Logic"
                        ],
                        "fullName": "FollowController Business Logic Tests followUser Business Logic should reject follow request when no follower identity provided",
                        "status": "passed",
                        "title": "should reject follow request when no follower identity provided",
                        "duration": 1.3682000000000016,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "followUser Business Logic"
                        ],
                        "fullName": "FollowController Business Logic Tests followUser Business Logic should return 404 when target user not found",
                        "status": "passed",
                        "title": "should return 404 when target user not found",
                        "duration": 1.1727999999999952,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "followUser Business Logic"
                        ],
                        "fullName": "FollowController Business Logic Tests followUser Business Logic should handle inactive user scenario",
                        "status": "passed",
                        "title": "should handle inactive user scenario",
                        "duration": 2.975500000000011,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "followUser Business Logic"
                        ],
                        "fullName": "FollowController Business Logic Tests followUser Business Logic should handle service validation errors correctly",
                        "status": "passed",
                        "title": "should handle service validation errors correctly",
                        "duration": 1.2755000000000223,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "followUser Business Logic"
                        ],
                        "fullName": "FollowController Business Logic Tests followUser Business Logic should handle self-follow prevention",
                        "status": "passed",
                        "title": "should handle self-follow prevention",
                        "duration": 1.1669999999999732,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "followUser Business Logic"
                        ],
                        "fullName": "FollowController Business Logic Tests followUser Business Logic should handle blocking scenarios",
                        "status": "passed",
                        "title": "should handle blocking scenarios",
                        "duration": 0.9655999999999949,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "unfollowUser Business Logic"
                        ],
                        "fullName": "FollowController Business Logic Tests unfollowUser Business Logic should successfully unfollow a user",
                        "status": "passed",
                        "title": "should successfully unfollow a user",
                        "duration": 1.8734999999999786,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "unfollowUser Business Logic"
                        ],
                        "fullName": "FollowController Business Logic Tests unfollowUser Business Logic should require authentication for unfollow",
                        "status": "passed",
                        "title": "should require authentication for unfollow",
                        "duration": 1.2958999999999605,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "unfollowUser Business Logic"
                        ],
                        "fullName": "FollowController Business Logic Tests unfollowUser Business Logic should handle not following scenario",
                        "status": "passed",
                        "title": "should handle not following scenario",
                        "duration": 1.2363000000000284,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "getUserFollowers Business Logic"
                        ],
                        "fullName": "FollowController Business Logic Tests getUserFollowers Business Logic should successfully get user followers with pagination",
                        "status": "passed",
                        "title": "should successfully get user followers with pagination",
                        "duration": 1.3996000000000208,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "getUserFollowers Business Logic"
                        ],
                        "fullName": "FollowController Business Logic Tests getUserFollowers Business Logic should handle empty followers list or errors",
                        "status": "passed",
                        "title": "should handle empty followers list or errors",
                        "duration": 1.1832999999999743,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "getUserFollowStats Business Logic"
                        ],
                        "fullName": "FollowController Business Logic Tests getUserFollowStats Business Logic should successfully get follow statistics",
                        "status": "passed",
                        "title": "should successfully get follow statistics",
                        "duration": 1.2456999999999994,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "getUserFollowStats Business Logic"
                        ],
                        "fullName": "FollowController Business Logic Tests getUserFollowStats Business Logic should handle stats for new user with zero follows",
                        "status": "passed",
                        "title": "should handle stats for new user with zero follows",
                        "duration": 1.0312999999999874,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "Error Code Mapping"
                        ],
                        "fullName": "FollowController Business Logic Tests Error Code Mapping should map VALIDATION_ERROR to 400 status code",
                        "status": "passed",
                        "title": "should map VALIDATION_ERROR to 400 status code",
                        "duration": 1.0627999999999815,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "Error Code Mapping"
                        ],
                        "fullName": "FollowController Business Logic Tests Error Code Mapping should map NO_FOLLOWER_IDENTITY to 409 status code",
                        "status": "passed",
                        "title": "should map NO_FOLLOWER_IDENTITY to 409 status code",
                        "duration": 0.9175999999999931,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "Error Code Mapping"
                        ],
                        "fullName": "FollowController Business Logic Tests Error Code Mapping should map AUTHENTICATION_REQUIRED to 401 status code",
                        "status": "passed",
                        "title": "should map AUTHENTICATION_REQUIRED to 401 status code",
                        "duration": 1.0375999999999976,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "Error Code Mapping"
                        ],
                        "fullName": "FollowController Business Logic Tests Error Code Mapping should map FORBIDDEN to 403 status code",
                        "status": "passed",
                        "title": "should map FORBIDDEN to 403 status code",
                        "duration": 0.9553999999999974,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "Error Code Mapping"
                        ],
                        "fullName": "FollowController Business Logic Tests Error Code Mapping should map USER_NOT_FOUND to 404 status code",
                        "status": "passed",
                        "title": "should map USER_NOT_FOUND to 404 status code",
                        "duration": 0.8362000000000194,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "Error Code Mapping"
                        ],
                        "fullName": "FollowController Business Logic Tests Error Code Mapping should map NOT_FOLLOWING to 404 status code",
                        "status": "passed",
                        "title": "should map NOT_FOLLOWING to 404 status code",
                        "duration": 0.7857999999999947,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "Error Code Mapping"
                        ],
                        "fullName": "FollowController Business Logic Tests Error Code Mapping should map ALREADY_FOLLOWING to 409 status code",
                        "status": "passed",
                        "title": "should map ALREADY_FOLLOWING to 409 status code",
                        "duration": 0.7653999999999996,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "Error Code Mapping"
                        ],
                        "fullName": "FollowController Business Logic Tests Error Code Mapping should map SELF_FOLLOW_ERROR to 409 status code",
                        "status": "passed",
                        "title": "should map SELF_FOLLOW_ERROR to 409 status code",
                        "duration": 2.217199999999991,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "Error Code Mapping"
                        ],
                        "fullName": "FollowController Business Logic Tests Error Code Mapping should map UNKNOWN_ERROR to 500 status code",
                        "status": "passed",
                        "title": "should map UNKNOWN_ERROR to 500 status code",
                        "duration": 1.9035000000000082,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "Exception Handling"
                        ],
                        "fullName": "FollowController Business Logic Tests Exception Handling should handle database connection errors gracefully",
                        "status": "passed",
                        "title": "should handle database connection errors gracefully",
                        "duration": 1.1315000000000168,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "Exception Handling"
                        ],
                        "fullName": "FollowController Business Logic Tests Exception Handling should handle service timeout errors",
                        "status": "passed",
                        "title": "should handle service timeout errors",
                        "duration": 1.1841000000000008,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Business Logic Tests",
                            "Exception Handling"
                        ],
                        "fullName": "FollowController Business Logic Tests Exception Handling should handle unknown exceptions with generic message",
                        "status": "passed",
                        "title": "should handle unknown exceptions with generic message",
                        "duration": 0.7850999999999999,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633502574,
                "endTime": 1751633502618.7852,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/controllers/FollowController.business.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "followUser()"
                        ],
                        "fullName": "FollowController Unit Tests followUser() should successfully follow user with authenticated request",
                        "status": "passed",
                        "title": "should successfully follow user with authenticated request",
                        "duration": 4.832199999999943,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "followUser()"
                        ],
                        "fullName": "FollowController Unit Tests followUser() should successfully handle ActivityPub external follow",
                        "status": "passed",
                        "title": "should successfully handle ActivityPub external follow",
                        "duration": 0.5960999999999785,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "followUser()"
                        ],
                        "fullName": "FollowController Unit Tests followUser() should reject when username is missing",
                        "status": "passed",
                        "title": "should reject when username is missing",
                        "duration": 0.7432000000000016,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "followUser()"
                        ],
                        "fullName": "FollowController Unit Tests followUser() should reject when user to follow not found",
                        "status": "passed",
                        "title": "should reject when user to follow not found",
                        "duration": 0.5711999999999762,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "followUser()"
                        ],
                        "fullName": "FollowController Unit Tests followUser() should reject when no follower identity provided",
                        "status": "passed",
                        "title": "should reject when no follower identity provided",
                        "duration": 0.377399999999966,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "followUser()"
                        ],
                        "fullName": "FollowController Unit Tests followUser() should handle service errors correctly",
                        "status": "passed",
                        "title": "should handle service errors correctly",
                        "duration": 0.4453999999999496,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "followUser()"
                        ],
                        "fullName": "FollowController Unit Tests followUser() should handle unexpected exceptions",
                        "status": "passed",
                        "title": "should handle unexpected exceptions",
                        "duration": 0.47450000000003456,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "unfollowUser()"
                        ],
                        "fullName": "FollowController Unit Tests unfollowUser() should successfully unfollow user",
                        "status": "passed",
                        "title": "should successfully unfollow user",
                        "duration": 0.6829999999999927,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "unfollowUser()"
                        ],
                        "fullName": "FollowController Unit Tests unfollowUser() should reject when authentication is missing",
                        "status": "passed",
                        "title": "should reject when authentication is missing",
                        "duration": 0.6928000000000338,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "unfollowUser()"
                        ],
                        "fullName": "FollowController Unit Tests unfollowUser() should handle service error for not following",
                        "status": "passed",
                        "title": "should handle service error for not following",
                        "duration": 0.4291999999999234,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "getUserFollowers()"
                        ],
                        "fullName": "FollowController Unit Tests getUserFollowers() should successfully get followers with default pagination",
                        "status": "passed",
                        "title": "should successfully get followers with default pagination",
                        "duration": 0.737700000000018,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "getUserFollowers()"
                        ],
                        "fullName": "FollowController Unit Tests getUserFollowers() should handle custom pagination parameters",
                        "status": "passed",
                        "title": "should handle custom pagination parameters",
                        "duration": 0.3729000000000724,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "getUserFollowers()"
                        ],
                        "fullName": "FollowController Unit Tests getUserFollowers() should ignore invalid pagination parameters",
                        "status": "passed",
                        "title": "should ignore invalid pagination parameters",
                        "duration": 0.3692999999999529,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "getUserFollowStats()"
                        ],
                        "fullName": "FollowController Unit Tests getUserFollowStats() should successfully get follow statistics",
                        "status": "passed",
                        "title": "should successfully get follow statistics",
                        "duration": 0.9153999999999769,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "checkFollowStatus()"
                        ],
                        "fullName": "FollowController Unit Tests checkFollowStatus() should successfully check follow status when following",
                        "status": "passed",
                        "title": "should successfully check follow status when following",
                        "duration": 1.038499999999999,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "checkFollowStatus()"
                        ],
                        "fullName": "FollowController Unit Tests checkFollowStatus() should handle missing target username",
                        "status": "passed",
                        "title": "should handle missing target username",
                        "duration": 0.5180000000000291,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "checkFollowStatus()"
                        ],
                        "fullName": "FollowController Unit Tests checkFollowStatus() should handle follower user not found",
                        "status": "passed",
                        "title": "should handle follower user not found",
                        "duration": 0.4923000000000002,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "bulkCheckFollowing()"
                        ],
                        "fullName": "FollowController Unit Tests bulkCheckFollowing() should successfully perform bulk follow check",
                        "status": "passed",
                        "title": "should successfully perform bulk follow check",
                        "duration": 1.1089000000000624,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "bulkCheckFollowing()"
                        ],
                        "fullName": "FollowController Unit Tests bulkCheckFollowing() should reject invalid usernames format",
                        "status": "passed",
                        "title": "should reject invalid usernames format",
                        "duration": 0.7092999999999847,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "getRecentFollowers()"
                        ],
                        "fullName": "FollowController Unit Tests getRecentFollowers() should successfully get recent followers for own account",
                        "status": "passed",
                        "title": "should successfully get recent followers for own account",
                        "duration": 0.9986000000000104,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "getRecentFollowers()"
                        ],
                        "fullName": "FollowController Unit Tests getRecentFollowers() should handle custom limit parameter",
                        "status": "passed",
                        "title": "should handle custom limit parameter",
                        "duration": 0.5609999999999218,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "getRecentFollowers()"
                        ],
                        "fullName": "FollowController Unit Tests getRecentFollowers() should reject when trying to view others recent followers",
                        "status": "passed",
                        "title": "should reject when trying to view others recent followers",
                        "duration": 0.5539999999999736,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "getRecentFollowers()"
                        ],
                        "fullName": "FollowController Unit Tests getRecentFollowers() should reject when not authenticated",
                        "status": "passed",
                        "title": "should reject when not authenticated",
                        "duration": 0.620200000000068,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "Error Code Mapping"
                        ],
                        "fullName": "FollowController Unit Tests Error Code Mapping should map validation errors to 400 status",
                        "status": "passed",
                        "title": "should map validation errors to 400 status",
                        "duration": 0.5650000000000546,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "Error Code Mapping"
                        ],
                        "fullName": "FollowController Unit Tests Error Code Mapping should map authentication errors to 401 status",
                        "status": "passed",
                        "title": "should map authentication errors to 401 status",
                        "duration": 0.5783000000000129,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "Error Code Mapping"
                        ],
                        "fullName": "FollowController Unit Tests Error Code Mapping should map forbidden errors to 403 status",
                        "status": "passed",
                        "title": "should map forbidden errors to 403 status",
                        "duration": 0.5425999999999931,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "Error Code Mapping"
                        ],
                        "fullName": "FollowController Unit Tests Error Code Mapping should map not found errors to 404 status",
                        "status": "passed",
                        "title": "should map not found errors to 404 status",
                        "duration": 0.642099999999914,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "Error Code Mapping"
                        ],
                        "fullName": "FollowController Unit Tests Error Code Mapping should map business rule conflicts to 409 status",
                        "status": "passed",
                        "title": "should map business rule conflicts to 409 status",
                        "duration": 0.5493000000000166,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowController Unit Tests",
                            "Error Code Mapping"
                        ],
                        "fullName": "FollowController Unit Tests Error Code Mapping should map unknown errors to 500 status",
                        "status": "passed",
                        "title": "should map unknown errors to 500 status",
                        "duration": 0.5253999999999905,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633502095,
                "endTime": 1751633502119.5254,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/controllers/FollowController.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "PostController",
                            "createPost",
                            "Successful Post Creation"
                        ],
                        "fullName": "PostController createPost Successful Post Creation should create a new post successfully",
                        "status": "passed",
                        "title": "should create a new post successfully",
                        "duration": 4.845899999999972,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "createPost",
                            "Successful Post Creation"
                        ],
                        "fullName": "PostController createPost Successful Post Creation should create scheduled post successfully",
                        "status": "passed",
                        "title": "should create scheduled post successfully",
                        "duration": 1.4352999999999838,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "createPost",
                            "Successful Post Creation"
                        ],
                        "fullName": "PostController createPost Successful Post Creation should handle content warning properly",
                        "status": "passed",
                        "title": "should handle content warning properly",
                        "duration": 1.6428999999999974,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "createPost",
                            "Input Validation"
                        ],
                        "fullName": "PostController createPost Input Validation should reject posts with empty content",
                        "status": "passed",
                        "title": "should reject posts with empty content",
                        "duration": 0.775100000000009,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "createPost",
                            "Input Validation"
                        ],
                        "fullName": "PostController createPost Input Validation should reject posts with only whitespace content",
                        "status": "passed",
                        "title": "should reject posts with only whitespace content",
                        "duration": 0.6573000000000206,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "createPost",
                            "Input Validation"
                        ],
                        "fullName": "PostController createPost Input Validation should reject posts exceeding character limit",
                        "status": "passed",
                        "title": "should reject posts exceeding character limit",
                        "duration": 0.4894999999999641,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "createPost",
                            "Input Validation"
                        ],
                        "fullName": "PostController createPost Input Validation should reject scheduled posts without scheduledFor date",
                        "status": "passed",
                        "title": "should reject scheduled posts without scheduledFor date",
                        "duration": 0.43149999999997135,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "createPost",
                            "Input Validation"
                        ],
                        "fullName": "PostController createPost Input Validation should reject scheduled posts with past dates",
                        "status": "passed",
                        "title": "should reject scheduled posts with past dates",
                        "duration": 0.49389999999999645,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "createPost",
                            "Server Errors"
                        ],
                        "fullName": "PostController createPost Server Errors should handle database errors gracefully",
                        "status": "passed",
                        "title": "should handle database errors gracefully",
                        "duration": 0.6714999999999804,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "getPosts",
                            "Successful Post Retrieval"
                        ],
                        "fullName": "PostController getPosts Successful Post Retrieval should return public posts with pagination",
                        "status": "passed",
                        "title": "should return public posts with pagination",
                        "duration": 0.7520000000000095,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "getPosts",
                            "Successful Post Retrieval"
                        ],
                        "fullName": "PostController getPosts Successful Post Retrieval should filter out current user own posts when authenticated",
                        "status": "passed",
                        "title": "should filter out current user own posts when authenticated",
                        "duration": 0.716700000000003,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "getPosts",
                            "Successful Post Retrieval"
                        ],
                        "fullName": "PostController getPosts Successful Post Retrieval should handle pagination parameters correctly",
                        "status": "passed",
                        "title": "should handle pagination parameters correctly",
                        "duration": 0.6035999999999717,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "getPosts",
                            "Successful Post Retrieval"
                        ],
                        "fullName": "PostController getPosts Successful Post Retrieval should handle invalid pagination parameters",
                        "status": "passed",
                        "title": "should handle invalid pagination parameters",
                        "duration": 0.47919999999999163,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "getPosts",
                            "Server Errors"
                        ],
                        "fullName": "PostController getPosts Server Errors should handle database errors gracefully",
                        "status": "passed",
                        "title": "should handle database errors gracefully",
                        "duration": 0.5194000000000187,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "getPostById",
                            "Successful Post Retrieval"
                        ],
                        "fullName": "PostController getPostById Successful Post Retrieval should return post when found and published",
                        "status": "passed",
                        "title": "should return post when found and published",
                        "duration": 0.6528999999999883,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "getPostById",
                            "Successful Post Retrieval"
                        ],
                        "fullName": "PostController getPostById Successful Post Retrieval should return unpublished post when author is viewing",
                        "status": "passed",
                        "title": "should return unpublished post when author is viewing",
                        "duration": 0.7125999999999522,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "getPostById",
                            "Access Control"
                        ],
                        "fullName": "PostController getPostById Access Control should return 404 for unpublished post when not the author",
                        "status": "passed",
                        "title": "should return 404 for unpublished post when not the author",
                        "duration": 0.7632000000000403,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "getPostById",
                            "Access Control"
                        ],
                        "fullName": "PostController getPostById Access Control should return 404 when post does not exist",
                        "status": "passed",
                        "title": "should return 404 when post does not exist",
                        "duration": 0.4892000000000394,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "getPostById",
                            "Input Validation"
                        ],
                        "fullName": "PostController getPostById Input Validation should return 400 when post ID is missing",
                        "status": "passed",
                        "title": "should return 400 when post ID is missing",
                        "duration": 0.5236000000000445,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "deletePost",
                            "Successful Post Deletion"
                        ],
                        "fullName": "PostController deletePost Successful Post Deletion should delete own post successfully",
                        "status": "passed",
                        "title": "should delete own post successfully",
                        "duration": 0.7458000000000311,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "deletePost",
                            "Access Control"
                        ],
                        "fullName": "PostController deletePost Access Control should return 403 when trying to delete another user post",
                        "status": "passed",
                        "title": "should return 403 when trying to delete another user post",
                        "duration": 0.6341999999999643,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "deletePost",
                            "Access Control"
                        ],
                        "fullName": "PostController deletePost Access Control should return 404 when post does not exist",
                        "status": "passed",
                        "title": "should return 404 when post does not exist",
                        "duration": 0.46059999999999945,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "getUserPosts",
                            "Successful User Posts Retrieval"
                        ],
                        "fullName": "PostController getUserPosts Successful User Posts Retrieval should return user posts with pagination",
                        "status": "passed",
                        "title": "should return user posts with pagination",
                        "duration": 0.6970000000000027,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostController",
                            "getUserPosts",
                            "Successful User Posts Retrieval"
                        ],
                        "fullName": "PostController getUserPosts Successful User Posts Retrieval should return 404 when user does not exist",
                        "status": "passed",
                        "title": "should return 404 when user does not exist",
                        "duration": 1.5045000000000073,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633504135,
                "endTime": 1751633504157.5044,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/controllers/PostController.test.ts"
            },
            {
                "assertionResults": [],
                "startTime": 1751633501321,
                "endTime": 1751633501321,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/integration/Follow.integration.test.ts"
            },
            {
                "assertionResults": [],
                "startTime": 1751633501321,
                "endTime": 1751633501321,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/integration/PostUser.integration.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createAuthMiddleware (Required Authentication)",
                            "Valid Authentication"
                        ],
                        "fullName": "Authentication Middleware createAuthMiddleware (Required Authentication) Valid Authentication should successfully authenticate with valid token",
                        "status": "passed",
                        "title": "should successfully authenticate with valid token",
                        "duration": 6.566800000000001,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createAuthMiddleware (Required Authentication)",
                            "Valid Authentication"
                        ],
                        "fullName": "Authentication Middleware createAuthMiddleware (Required Authentication) Valid Authentication should handle different token formats correctly",
                        "status": "passed",
                        "title": "should handle different token formats correctly",
                        "duration": 1.2925000000000182,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createAuthMiddleware (Required Authentication)",
                            "Valid Authentication"
                        ],
                        "fullName": "Authentication Middleware createAuthMiddleware (Required Authentication) Valid Authentication should handle user with numeric ID",
                        "status": "passed",
                        "title": "should handle user with numeric ID",
                        "duration": 2.290800000000047,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createAuthMiddleware (Required Authentication)",
                            "Valid Authentication"
                        ],
                        "fullName": "Authentication Middleware createAuthMiddleware (Required Authentication) Valid Authentication should handle case-sensitive headers",
                        "status": "passed",
                        "title": "should handle case-sensitive headers",
                        "duration": 0.9017999999999802,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createAuthMiddleware (Required Authentication)",
                            "Missing Authentication"
                        ],
                        "fullName": "Authentication Middleware createAuthMiddleware (Required Authentication) Missing Authentication should return 401 when no authorization header is provided",
                        "status": "passed",
                        "title": "should return 401 when no authorization header is provided",
                        "duration": 1.9642999999999802,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createAuthMiddleware (Required Authentication)",
                            "Missing Authentication"
                        ],
                        "fullName": "Authentication Middleware createAuthMiddleware (Required Authentication) Missing Authentication should return 401 when authorization header is empty",
                        "status": "passed",
                        "title": "should return 401 when authorization header is empty",
                        "duration": 1.008199999999988,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createAuthMiddleware (Required Authentication)",
                            "Missing Authentication"
                        ],
                        "fullName": "Authentication Middleware createAuthMiddleware (Required Authentication) Missing Authentication should return 401 when authorization header has wrong format",
                        "status": "passed",
                        "title": "should return 401 when authorization header has wrong format",
                        "duration": 0.9861999999999966,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createAuthMiddleware (Required Authentication)",
                            "Missing Authentication"
                        ],
                        "fullName": "Authentication Middleware createAuthMiddleware (Required Authentication) Missing Authentication should return 401 when Bearer token is missing",
                        "status": "passed",
                        "title": "should return 401 when Bearer token is missing",
                        "duration": 0.6494999999999891,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createAuthMiddleware (Required Authentication)",
                            "Invalid Authentication"
                        ],
                        "fullName": "Authentication Middleware createAuthMiddleware (Required Authentication) Invalid Authentication should return 401 for invalid token",
                        "status": "passed",
                        "title": "should return 401 for invalid token",
                        "duration": 1.1883000000000266,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createAuthMiddleware (Required Authentication)",
                            "Invalid Authentication"
                        ],
                        "fullName": "Authentication Middleware createAuthMiddleware (Required Authentication) Invalid Authentication should return 401 for expired token",
                        "status": "passed",
                        "title": "should return 401 for expired token",
                        "duration": 1.0060000000000286,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createAuthMiddleware (Required Authentication)",
                            "Invalid Authentication"
                        ],
                        "fullName": "Authentication Middleware createAuthMiddleware (Required Authentication) Invalid Authentication should return 401 for malformed token",
                        "status": "passed",
                        "title": "should return 401 for malformed token",
                        "duration": 0.8439999999999941,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createAuthMiddleware (Required Authentication)",
                            "Invalid Authentication"
                        ],
                        "fullName": "Authentication Middleware createAuthMiddleware (Required Authentication) Invalid Authentication should handle generic authentication errors",
                        "status": "passed",
                        "title": "should handle generic authentication errors",
                        "duration": 0.7833999999999719,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createAuthMiddleware (Required Authentication)",
                            "Invalid Authentication"
                        ],
                        "fullName": "Authentication Middleware createAuthMiddleware (Required Authentication) Invalid Authentication should handle non-Error exceptions",
                        "status": "passed",
                        "title": "should handle non-Error exceptions",
                        "duration": 0.8416000000000281,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createAuthMiddleware (Required Authentication)",
                            "Error Handling Edge Cases"
                        ],
                        "fullName": "Authentication Middleware createAuthMiddleware (Required Authentication) Error Handling Edge Cases should handle extractTokenFromHeader throwing an error",
                        "status": "passed",
                        "title": "should handle extractTokenFromHeader throwing an error",
                        "duration": 0.8820999999999799,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createAuthMiddleware (Required Authentication)",
                            "Error Handling Edge Cases"
                        ],
                        "fullName": "Authentication Middleware createAuthMiddleware (Required Authentication) Error Handling Edge Cases should handle verifyToken returning null or undefined",
                        "status": "passed",
                        "title": "should handle verifyToken returning null or undefined",
                        "duration": 0.9753000000000043,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createOptionalAuthMiddleware (Optional Authentication)",
                            "Valid Authentication"
                        ],
                        "fullName": "Authentication Middleware createOptionalAuthMiddleware (Optional Authentication) Valid Authentication should authenticate when valid token is provided",
                        "status": "passed",
                        "title": "should authenticate when valid token is provided",
                        "duration": 1.1481999999999744,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createOptionalAuthMiddleware (Optional Authentication)",
                            "Valid Authentication"
                        ],
                        "fullName": "Authentication Middleware createOptionalAuthMiddleware (Optional Authentication) Valid Authentication should handle valid authentication same as required middleware",
                        "status": "passed",
                        "title": "should handle valid authentication same as required middleware",
                        "duration": 1.2806999999999675,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createOptionalAuthMiddleware (Optional Authentication)",
                            "Missing Authentication"
                        ],
                        "fullName": "Authentication Middleware createOptionalAuthMiddleware (Optional Authentication) Missing Authentication should continue without user when no token is provided",
                        "status": "passed",
                        "title": "should continue without user when no token is provided",
                        "duration": 1.0237000000000194,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createOptionalAuthMiddleware (Optional Authentication)",
                            "Missing Authentication"
                        ],
                        "fullName": "Authentication Middleware createOptionalAuthMiddleware (Optional Authentication) Missing Authentication should continue without user when authorization header is empty",
                        "status": "passed",
                        "title": "should continue without user when authorization header is empty",
                        "duration": 0.7364000000000033,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createOptionalAuthMiddleware (Optional Authentication)",
                            "Missing Authentication"
                        ],
                        "fullName": "Authentication Middleware createOptionalAuthMiddleware (Optional Authentication) Missing Authentication should continue without user when Bearer format is wrong",
                        "status": "passed",
                        "title": "should continue without user when Bearer format is wrong",
                        "duration": 0.8295000000000528,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createOptionalAuthMiddleware (Optional Authentication)",
                            "Invalid Authentication"
                        ],
                        "fullName": "Authentication Middleware createOptionalAuthMiddleware (Optional Authentication) Invalid Authentication should continue without user when token is invalid",
                        "status": "passed",
                        "title": "should continue without user when token is invalid",
                        "duration": 1.1554000000000428,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createOptionalAuthMiddleware (Optional Authentication)",
                            "Invalid Authentication"
                        ],
                        "fullName": "Authentication Middleware createOptionalAuthMiddleware (Optional Authentication) Invalid Authentication should continue without user when token is expired",
                        "status": "passed",
                        "title": "should continue without user when token is expired",
                        "duration": 0.9252999999999929,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createOptionalAuthMiddleware (Optional Authentication)",
                            "Invalid Authentication"
                        ],
                        "fullName": "Authentication Middleware createOptionalAuthMiddleware (Optional Authentication) Invalid Authentication should continue without user for any token verification error",
                        "status": "passed",
                        "title": "should continue without user for any token verification error",
                        "duration": 0.8059999999999832,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "createOptionalAuthMiddleware (Optional Authentication)",
                            "Invalid Authentication"
                        ],
                        "fullName": "Authentication Middleware createOptionalAuthMiddleware (Optional Authentication) Invalid Authentication should handle extractTokenFromHeader errors gracefully",
                        "status": "passed",
                        "title": "should handle extractTokenFromHeader errors gracefully",
                        "duration": 0.8066000000000031,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "Middleware Factory Functions"
                        ],
                        "fullName": "Authentication Middleware Middleware Factory Functions should create middleware function from createAuthMiddleware",
                        "status": "passed",
                        "title": "should create middleware function from createAuthMiddleware",
                        "duration": 0.7154000000000451,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "Middleware Factory Functions"
                        ],
                        "fullName": "Authentication Middleware Middleware Factory Functions should create middleware function from createOptionalAuthMiddleware",
                        "status": "passed",
                        "title": "should create middleware function from createOptionalAuthMiddleware",
                        "duration": 0.599899999999991,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "Middleware Factory Functions"
                        ],
                        "fullName": "Authentication Middleware Middleware Factory Functions should create independent middleware instances",
                        "status": "passed",
                        "title": "should create independent middleware instances",
                        "duration": 0.8612999999999715,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "Middleware Factory Functions"
                        ],
                        "fullName": "Authentication Middleware Middleware Factory Functions should handle different AuthService instances",
                        "status": "passed",
                        "title": "should handle different AuthService instances",
                        "duration": 0.6340000000000146,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "Integration Scenarios"
                        ],
                        "fullName": "Authentication Middleware Integration Scenarios should work in sequence with multiple middleware",
                        "status": "passed",
                        "title": "should work in sequence with multiple middleware",
                        "duration": 0.8115000000000236,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "Integration Scenarios"
                        ],
                        "fullName": "Authentication Middleware Integration Scenarios should preserve existing request properties",
                        "status": "passed",
                        "title": "should preserve existing request properties",
                        "duration": 0.5944000000000074,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Middleware",
                            "Integration Scenarios"
                        ],
                        "fullName": "Authentication Middleware Integration Scenarios should handle concurrent requests independently",
                        "status": "passed",
                        "title": "should handle concurrent requests independently",
                        "duration": 1.1922999999999888,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633502625,
                "endTime": 1751633502665.1924,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/middleware/authMiddleware.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateFollowRequest",
                            "Valid Follow Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateFollowRequest Valid Follow Requests should pass validation with valid username and no actorId",
                        "status": "passed",
                        "title": "should pass validation with valid username and no actorId",
                        "duration": 5.496300000000019,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateFollowRequest",
                            "Valid Follow Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateFollowRequest Valid Follow Requests should pass validation with valid ActivityPub actor ID",
                        "status": "passed",
                        "title": "should pass validation with valid ActivityPub actor ID",
                        "duration": 2.6987000000000307,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateFollowRequest",
                            "Valid Follow Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateFollowRequest Valid Follow Requests should pass validation with various valid usernames",
                        "status": "passed",
                        "title": "should pass validation with various valid usernames",
                        "duration": 1.7802999999998974,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateFollowRequest",
                            "Valid Follow Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateFollowRequest Valid Follow Requests should pass validation with various valid ActivityPub URLs",
                        "status": "passed",
                        "title": "should pass validation with various valid ActivityPub URLs",
                        "duration": 1.4343999999999824,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateFollowRequest",
                            "Valid Follow Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateFollowRequest Valid Follow Requests should pass validation with null actorId",
                        "status": "passed",
                        "title": "should pass validation with null actorId",
                        "duration": 0.6466999999998961,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateFollowRequest",
                            "Invalid Follow Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateFollowRequest Invalid Follow Requests should reject invalid username",
                        "status": "passed",
                        "title": "should reject invalid username",
                        "duration": 7.663600000000088,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateFollowRequest",
                            "Invalid Follow Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateFollowRequest Invalid Follow Requests should reject invalid ActivityPub actor URLs",
                        "status": "passed",
                        "title": "should reject invalid ActivityPub actor URLs",
                        "duration": 5.4968000000000075,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateUnfollowRequest",
                            "Valid Unfollow Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateUnfollowRequest Valid Unfollow Requests should pass validation with valid username",
                        "status": "passed",
                        "title": "should pass validation with valid username",
                        "duration": 0.6870999999999867,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateUnfollowRequest",
                            "Valid Unfollow Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateUnfollowRequest Valid Unfollow Requests should pass validation with various valid usernames",
                        "status": "passed",
                        "title": "should pass validation with various valid usernames",
                        "duration": 0.9777000000000271,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateUnfollowRequest",
                            "Invalid Unfollow Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateUnfollowRequest Invalid Unfollow Requests should reject invalid usernames",
                        "status": "passed",
                        "title": "should reject invalid usernames",
                        "duration": 2.3062999999999647,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateFollowerQuery",
                            "Valid Follower Queries"
                        ],
                        "fullName": "Follow Validation Middleware validateFollowerQuery Valid Follower Queries should pass validation with default parameters",
                        "status": "passed",
                        "title": "should pass validation with default parameters",
                        "duration": 0.9520999999999731,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateFollowerQuery",
                            "Valid Follower Queries"
                        ],
                        "fullName": "Follow Validation Middleware validateFollowerQuery Valid Follower Queries should pass validation with valid pagination parameters",
                        "status": "passed",
                        "title": "should pass validation with valid pagination parameters",
                        "duration": 0.4113000000000966,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateFollowerQuery",
                            "Valid Follower Queries"
                        ],
                        "fullName": "Follow Validation Middleware validateFollowerQuery Valid Follower Queries should pass validation with includeInactive flag",
                        "status": "passed",
                        "title": "should pass validation with includeInactive flag",
                        "duration": 0.4312000000001035,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateFollowerQuery",
                            "Valid Follower Queries"
                        ],
                        "fullName": "Follow Validation Middleware validateFollowerQuery Valid Follower Queries should handle includeInactive false correctly",
                        "status": "passed",
                        "title": "should handle includeInactive false correctly",
                        "duration": 0.33349999999995816,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateFollowerQuery",
                            "Invalid Follower Queries"
                        ],
                        "fullName": "Follow Validation Middleware validateFollowerQuery Invalid Follower Queries should reject invalid username in params",
                        "status": "passed",
                        "title": "should reject invalid username in params",
                        "duration": 1.1682000000000698,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateFollowerQuery",
                            "Invalid Follower Queries"
                        ],
                        "fullName": "Follow Validation Middleware validateFollowerQuery Invalid Follower Queries should reject page number that is too high",
                        "status": "passed",
                        "title": "should reject page number that is too high",
                        "duration": 0.7205999999999904,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateFollowerQuery",
                            "Invalid Follower Queries"
                        ],
                        "fullName": "Follow Validation Middleware validateFollowerQuery Invalid Follower Queries should reject limit that is too high",
                        "status": "passed",
                        "title": "should reject limit that is too high",
                        "duration": 0.7623999999999569,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateFollowerQuery",
                            "Invalid Follower Queries"
                        ],
                        "fullName": "Follow Validation Middleware validateFollowerQuery Invalid Follower Queries should reject zero or negative page numbers",
                        "status": "passed",
                        "title": "should reject zero or negative page numbers",
                        "duration": 0.7176000000000613,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateWebFingerQuery",
                            "Valid WebFinger Queries"
                        ],
                        "fullName": "Follow Validation Middleware validateWebFingerQuery Valid WebFinger Queries should pass validation with acct: format",
                        "status": "passed",
                        "title": "should pass validation with acct: format",
                        "duration": 0.467200000000048,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateWebFingerQuery",
                            "Valid WebFinger Queries"
                        ],
                        "fullName": "Follow Validation Middleware validateWebFingerQuery Valid WebFinger Queries should pass validation with HTTPS URL format",
                        "status": "passed",
                        "title": "should pass validation with HTTPS URL format",
                        "duration": 0.32730000000003656,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateWebFingerQuery",
                            "Valid WebFinger Queries"
                        ],
                        "fullName": "Follow Validation Middleware validateWebFingerQuery Valid WebFinger Queries should pass validation with various acct: formats",
                        "status": "passed",
                        "title": "should pass validation with various acct: formats",
                        "duration": 0.43270000000006803,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateWebFingerQuery",
                            "Valid WebFinger Queries"
                        ],
                        "fullName": "Follow Validation Middleware validateWebFingerQuery Valid WebFinger Queries should pass validation with various HTTPS URL formats",
                        "status": "passed",
                        "title": "should pass validation with various HTTPS URL formats",
                        "duration": 0.5957999999999402,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateWebFingerQuery",
                            "Invalid WebFinger Queries"
                        ],
                        "fullName": "Follow Validation Middleware validateWebFingerQuery Invalid WebFinger Queries should reject invalid resource formats",
                        "status": "passed",
                        "title": "should reject invalid resource formats",
                        "duration": 4.851500000000101,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateWebFingerQuery",
                            "Invalid WebFinger Queries"
                        ],
                        "fullName": "Follow Validation Middleware validateWebFingerQuery Invalid WebFinger Queries should reject missing resource parameter",
                        "status": "passed",
                        "title": "should reject missing resource parameter",
                        "duration": 1.3021999999999707,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateActivityPubInbox",
                            "Valid ActivityPub Inbox Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateActivityPubInbox Valid ActivityPub Inbox Requests should pass validation with valid ActivityPub request",
                        "status": "passed",
                        "title": "should pass validation with valid ActivityPub request",
                        "duration": 0.6233999999999469,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateActivityPubInbox",
                            "Valid ActivityPub Inbox Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateActivityPubInbox Valid ActivityPub Inbox Requests should pass validation with extended ActivityPub content type",
                        "status": "passed",
                        "title": "should pass validation with extended ActivityPub content type",
                        "duration": 0.3210000000000264,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateActivityPubInbox",
                            "Valid ActivityPub Inbox Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateActivityPubInbox Valid ActivityPub Inbox Requests should pass validation with all required ActivityPub fields",
                        "status": "passed",
                        "title": "should pass validation with all required ActivityPub fields",
                        "duration": 0.44919999999990523,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateActivityPubInbox",
                            "Invalid ActivityPub Inbox Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateActivityPubInbox Invalid ActivityPub Inbox Requests should reject non-ActivityPub content type",
                        "status": "passed",
                        "title": "should reject non-ActivityPub content type",
                        "duration": 2.239599999999996,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateActivityPubInbox",
                            "Invalid ActivityPub Inbox Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateActivityPubInbox Invalid ActivityPub Inbox Requests should reject missing content type",
                        "status": "passed",
                        "title": "should reject missing content type",
                        "duration": 0.9668000000000347,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateActivityPubInbox",
                            "Invalid ActivityPub Inbox Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateActivityPubInbox Invalid ActivityPub Inbox Requests should reject invalid username",
                        "status": "passed",
                        "title": "should reject invalid username",
                        "duration": 0.810100000000034,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateActivityPubInbox",
                            "Invalid ActivityPub Inbox Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateActivityPubInbox Invalid ActivityPub Inbox Requests should reject non-object request body",
                        "status": "passed",
                        "title": "should reject non-object request body",
                        "duration": 1.893699999999967,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "validateActivityPubInbox",
                            "Invalid ActivityPub Inbox Requests"
                        ],
                        "fullName": "Follow Validation Middleware validateActivityPubInbox Invalid ActivityPub Inbox Requests should reject ActivityPub activities missing required fields",
                        "status": "passed",
                        "title": "should reject ActivityPub activities missing required fields",
                        "duration": 2.000499999999988,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Validation Middleware",
                            "Error Handling"
                        ],
                        "fullName": "Follow Validation Middleware Error Handling should handle validation errors properly",
                        "status": "passed",
                        "title": "should handle validation errors properly",
                        "duration": 0.7418999999999869,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633502125,
                "endTime": 1751633502180.742,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/middleware/followValidationMiddleware.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateMediaUpload",
                            "Valid Media Uploads"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateMediaUpload Valid Media Uploads should pass validation with valid image file",
                        "status": "passed",
                        "title": "should pass validation with valid image file",
                        "duration": 3.5763999999999214,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateMediaUpload",
                            "Valid Media Uploads"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateMediaUpload Valid Media Uploads should pass validation with all supported image types",
                        "status": "passed",
                        "title": "should pass validation with all supported image types",
                        "duration": 0.8373000000000275,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateMediaUpload",
                            "Valid Media Uploads"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateMediaUpload Valid Media Uploads should pass validation with supported video types",
                        "status": "passed",
                        "title": "should pass validation with supported video types",
                        "duration": 0.4652999999999565,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateMediaUpload",
                            "Valid Media Uploads"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateMediaUpload Valid Media Uploads should pass validation without alt text",
                        "status": "passed",
                        "title": "should pass validation without alt text",
                        "duration": 0.650000000000091,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateMediaUpload",
                            "Valid Media Uploads"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateMediaUpload Valid Media Uploads should pass validation with empty alt text",
                        "status": "passed",
                        "title": "should pass validation with empty alt text",
                        "duration": 0.4936999999999898,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateMediaUpload",
                            "Invalid Media Uploads"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateMediaUpload Invalid Media Uploads should reject upload without file",
                        "status": "passed",
                        "title": "should reject upload without file",
                        "duration": 2.578999999999951,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateMediaUpload",
                            "Invalid Media Uploads"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateMediaUpload Invalid Media Uploads should reject unsupported file types",
                        "status": "failed",
                        "title": "should reject unsupported file types",
                        "duration": 15.682500000000005,
                        "failureMessages": [
                            "AssertionError: expected \"spy\" to be called with arguments: [ ObjectContaining{…} ]\u001b[90m\n\nReceived: \n\n\u001b[1m  1st spy call:\n\n\u001b[22m\u001b[2m  Array [\u001b[22m\n\u001b[32m-   ObjectContaining {\u001b[90m\n\u001b[32m-     \"error\": ObjectContaining {\u001b[90m\n\u001b[32m-       \"code\": \"VALIDATION_ERROR\",\u001b[90m\n\u001b[32m-       \"details\": ArrayContaining [\u001b[90m\n\u001b[32m-         ObjectContaining {\u001b[90m\n\u001b[32m-           \"field\": \"mimetype\",\u001b[90m\n\u001b[32m-           \"message\": \"File type not supported. Use JPEG, PNG, GIF, WEBP, MP4, or WEBM\",\u001b[90m\n\u001b[32m-         },\u001b[90m\n\u001b[32m-       ],\u001b[90m\n\u001b[31m+   Object {\u001b[90m\n\u001b[31m+     \"error\": Object {\u001b[90m\n\u001b[31m+       \"code\": \"INVALID_FILE_TYPE\",\u001b[90m\n\u001b[31m+       \"message\": \"File type text/plain is not supported. Allowed types: image/jpeg, image/jpg, image/png, image/gif, image/webp, video/mp4, video/webm, video/quicktime\",\u001b[90m\n\u001b[2m      },\u001b[22m\n\u001b[2m      \"success\": false,\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m  ]\u001b[22m\n\u001b[39m\u001b[90m\n\nNumber of calls: \u001b[1m1\u001b[22m\n\u001b[39m\n    at Proxy.<anonymous> (file:///C:/Users/Et%20Al/Documents/GitHub/parasocial/backend/node_modules/@vitest/expect/dist/index.js:1465:13)\n    at Proxy.<anonymous> (file:///C:/Users/Et%20Al/Documents/GitHub/parasocial/backend/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///C:/Users/Et%20Al/Documents/GitHub/parasocial/backend/node_modules/chai/chai.js:1618:25)\n    at C:\\Users\\Et Al\\Documents\\GitHub\\ParaSocial\\backend\\__tests__\\middleware\\mediaModerationValidationMiddleware.test.ts:222:27\n    at Array.forEach (<anonymous>)\n    at C:\\Users\\Et Al\\Documents\\GitHub\\ParaSocial\\backend\\__tests__\\middleware\\mediaModerationValidationMiddleware.test.ts:202:26\n    at file:///C:/Users/Et%20Al/Documents/GitHub/parasocial/backend/node_modules/@vitest/runner/dist/index.js:146:14\n    at file:///C:/Users/Et%20Al/Documents/GitHub/parasocial/backend/node_modules/@vitest/runner/dist/index.js:533:11\n    at runWithTimeout (file:///C:/Users/Et%20Al/Documents/GitHub/parasocial/backend/node_modules/@vitest/runner/dist/index.js:39:7)\n    at runTest (file:///C:/Users/Et%20Al/Documents/GitHub/parasocial/backend/node_modules/@vitest/runner/dist/index.js:1056:17)"
                        ],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateMediaUpload",
                            "Invalid Media Uploads"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateMediaUpload Invalid Media Uploads should reject files that are too large",
                        "status": "passed",
                        "title": "should reject files that are too large",
                        "duration": 1.362600000000043,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateMediaUpload",
                            "Invalid Media Uploads"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateMediaUpload Invalid Media Uploads should reject empty files",
                        "status": "passed",
                        "title": "should reject empty files",
                        "duration": 1.749900000000025,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateMediaUpload",
                            "Invalid Media Uploads"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateMediaUpload Invalid Media Uploads should reject alt text that is too long",
                        "status": "passed",
                        "title": "should reject alt text that is too long",
                        "duration": 2.0176999999999907,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateCreateReport",
                            "Valid Report Creation"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateCreateReport Valid Report Creation should pass validation for user report",
                        "status": "passed",
                        "title": "should pass validation for user report",
                        "duration": 1.5783999999999878,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateCreateReport",
                            "Valid Report Creation"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateCreateReport Valid Report Creation should pass validation for post report",
                        "status": "passed",
                        "title": "should pass validation for post report",
                        "duration": 0.5650000000000546,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateCreateReport",
                            "Valid Report Creation"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateCreateReport Valid Report Creation should pass validation for all report types",
                        "status": "passed",
                        "title": "should pass validation for all report types",
                        "duration": 1.5778999999999996,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateCreateReport",
                            "Valid Report Creation"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateCreateReport Valid Report Creation should pass validation with maximum length description",
                        "status": "passed",
                        "title": "should pass validation with maximum length description",
                        "duration": 0.5982999999999947,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateCreateReport",
                            "Invalid Report Creation"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateCreateReport Invalid Report Creation should reject invalid report type",
                        "status": "passed",
                        "title": "should reject invalid report type",
                        "duration": 1.2980999999999767,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateCreateReport",
                            "Invalid Report Creation"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateCreateReport Invalid Report Creation should reject description that is too short",
                        "status": "passed",
                        "title": "should reject description that is too short",
                        "duration": 0.782799999999952,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateCreateReport",
                            "Invalid Report Creation"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateCreateReport Invalid Report Creation should reject description that is too long",
                        "status": "passed",
                        "title": "should reject description that is too long",
                        "duration": 1.8564999999999827,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateCreateReport",
                            "Invalid Report Creation"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateCreateReport Invalid Report Creation should reject report with both user and post IDs",
                        "status": "passed",
                        "title": "should reject report with both user and post IDs",
                        "duration": 0.754799999999932,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateCreateReport",
                            "Invalid Report Creation"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateCreateReport Invalid Report Creation should reject report with neither user nor post ID",
                        "status": "passed",
                        "title": "should reject report with neither user nor post ID",
                        "duration": 0.5593999999999824,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateBlockUser",
                            "Valid User Blocking"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateBlockUser Valid User Blocking should pass validation with reason",
                        "status": "passed",
                        "title": "should pass validation with reason",
                        "duration": 0.4519999999999982,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateBlockUser",
                            "Valid User Blocking"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateBlockUser Valid User Blocking should pass validation without reason",
                        "status": "passed",
                        "title": "should pass validation without reason",
                        "duration": 0.24119999999993524,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateBlockUser",
                            "Valid User Blocking"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateBlockUser Valid User Blocking should pass validation with empty reason",
                        "status": "passed",
                        "title": "should pass validation with empty reason",
                        "duration": 0.24360000000001492,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateBlockUser",
                            "Invalid User Blocking"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateBlockUser Invalid User Blocking should reject reason that is too long",
                        "status": "passed",
                        "title": "should reject reason that is too long",
                        "duration": 0.5752999999999702,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateUsernameParam",
                            "Valid Usernames"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateUsernameParam Valid Usernames should pass validation with valid username",
                        "status": "passed",
                        "title": "should pass validation with valid username",
                        "duration": 0.7156999999999698,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateUsernameParam",
                            "Valid Usernames"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateUsernameParam Valid Usernames should pass validation with minimum length username",
                        "status": "passed",
                        "title": "should pass validation with minimum length username",
                        "duration": 0.6376000000000204,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateUsernameParam",
                            "Valid Usernames"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateUsernameParam Valid Usernames should pass validation with maximum length username",
                        "status": "passed",
                        "title": "should pass validation with maximum length username",
                        "duration": 0.8178000000000338,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateUsernameParam",
                            "Valid Usernames"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateUsernameParam Valid Usernames should pass validation with underscores",
                        "status": "passed",
                        "title": "should pass validation with underscores",
                        "duration": 0.7088999999999714,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateUsernameParam",
                            "Invalid Usernames"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateUsernameParam Invalid Usernames should reject username that is too short",
                        "status": "passed",
                        "title": "should reject username that is too short",
                        "duration": 0.9637000000000171,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateUsernameParam",
                            "Invalid Usernames"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateUsernameParam Invalid Usernames should reject username that is too long",
                        "status": "passed",
                        "title": "should reject username that is too long",
                        "duration": 1.0009000000000015,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "validateUsernameParam",
                            "Invalid Usernames"
                        ],
                        "fullName": "Media & Moderation Validation Middleware validateUsernameParam Invalid Usernames should reject username with invalid characters",
                        "status": "passed",
                        "title": "should reject username with invalid characters",
                        "duration": 2.9388999999999896,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Media & Moderation Validation Middleware",
                            "Error Handling"
                        ],
                        "fullName": "Media & Moderation Validation Middleware Error Handling should handle internal server errors gracefully",
                        "status": "passed",
                        "title": "should handle internal server errors gracefully",
                        "duration": 0.9278000000000475,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633502124,
                "endTime": 1751633502175.9277,
                "status": "failed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/middleware/mediaModerationValidationMiddleware.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateCreatePost",
                            "Valid Post Creation"
                        ],
                        "fullName": "Post Validation Middleware validateCreatePost Valid Post Creation should pass validation with minimal valid data",
                        "status": "passed",
                        "title": "should pass validation with minimal valid data",
                        "duration": 4.623899999999992,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateCreatePost",
                            "Valid Post Creation"
                        ],
                        "fullName": "Post Validation Middleware validateCreatePost Valid Post Creation should pass validation with all optional fields",
                        "status": "passed",
                        "title": "should pass validation with all optional fields",
                        "duration": 2.5043000000000006,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateCreatePost",
                            "Valid Post Creation"
                        ],
                        "fullName": "Post Validation Middleware validateCreatePost Valid Post Creation should pass validation with empty content warning",
                        "status": "passed",
                        "title": "should pass validation with empty content warning",
                        "duration": 0.9755000000000109,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateCreatePost",
                            "Valid Post Creation"
                        ],
                        "fullName": "Post Validation Middleware validateCreatePost Valid Post Creation should apply default values correctly",
                        "status": "passed",
                        "title": "should apply default values correctly",
                        "duration": 1.0437000000000012,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateCreatePost",
                            "Invalid Post Creation"
                        ],
                        "fullName": "Post Validation Middleware validateCreatePost Invalid Post Creation should reject empty content",
                        "status": "passed",
                        "title": "should reject empty content",
                        "duration": 4.996999999999957,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateCreatePost",
                            "Invalid Post Creation"
                        ],
                        "fullName": "Post Validation Middleware validateCreatePost Invalid Post Creation should reject content that is too long",
                        "status": "passed",
                        "title": "should reject content that is too long",
                        "duration": 1.5996000000000095,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateCreatePost",
                            "Invalid Post Creation"
                        ],
                        "fullName": "Post Validation Middleware validateCreatePost Invalid Post Creation should reject content warning that is too long",
                        "status": "passed",
                        "title": "should reject content warning that is too long",
                        "duration": 3.498100000000022,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateCreatePost",
                            "Invalid Post Creation"
                        ],
                        "fullName": "Post Validation Middleware validateCreatePost Invalid Post Creation should reject scheduled post without scheduled date",
                        "status": "passed",
                        "title": "should reject scheduled post without scheduled date",
                        "duration": 1.5637000000000398,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateCreatePost",
                            "Invalid Post Creation"
                        ],
                        "fullName": "Post Validation Middleware validateCreatePost Invalid Post Creation should reject scheduled date in the past",
                        "status": "passed",
                        "title": "should reject scheduled date in the past",
                        "duration": 1.7601999999999975,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateCreatePost",
                            "Invalid Post Creation"
                        ],
                        "fullName": "Post Validation Middleware validateCreatePost Invalid Post Creation should reject invalid datetime format",
                        "status": "passed",
                        "title": "should reject invalid datetime format",
                        "duration": 1.0106000000000108,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateCreatePost",
                            "Invalid Post Creation"
                        ],
                        "fullName": "Post Validation Middleware validateCreatePost Invalid Post Creation should handle multiple validation errors",
                        "status": "passed",
                        "title": "should handle multiple validation errors",
                        "duration": 1.1116999999999848,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateCreatePost",
                            "Edge Cases"
                        ],
                        "fullName": "Post Validation Middleware validateCreatePost Edge Cases should handle missing request body",
                        "status": "passed",
                        "title": "should handle missing request body",
                        "duration": 0.9037000000000148,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateCreatePost",
                            "Edge Cases"
                        ],
                        "fullName": "Post Validation Middleware validateCreatePost Edge Cases should trim content whitespace",
                        "status": "passed",
                        "title": "should trim content whitespace",
                        "duration": 0.648900000000026,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateCreatePost",
                            "Edge Cases"
                        ],
                        "fullName": "Post Validation Middleware validateCreatePost Edge Cases should handle non-string content types",
                        "status": "passed",
                        "title": "should handle non-string content types",
                        "duration": 0.7769000000000119,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateUpdatePost",
                            "Valid Post Updates"
                        ],
                        "fullName": "Post Validation Middleware validateUpdatePost Valid Post Updates should pass validation with partial update data",
                        "status": "passed",
                        "title": "should pass validation with partial update data",
                        "duration": 0.7463999999999942,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateUpdatePost",
                            "Valid Post Updates"
                        ],
                        "fullName": "Post Validation Middleware validateUpdatePost Valid Post Updates should pass validation with all updatable fields",
                        "status": "passed",
                        "title": "should pass validation with all updatable fields",
                        "duration": 0.450300000000027,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateUpdatePost",
                            "Valid Post Updates"
                        ],
                        "fullName": "Post Validation Middleware validateUpdatePost Valid Post Updates should pass validation with empty body",
                        "status": "passed",
                        "title": "should pass validation with empty body",
                        "duration": 0.43619999999998527,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateUpdatePost",
                            "Invalid Post Updates"
                        ],
                        "fullName": "Post Validation Middleware validateUpdatePost Invalid Post Updates should reject empty content when provided",
                        "status": "passed",
                        "title": "should reject empty content when provided",
                        "duration": 0.9578000000000202,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validateUpdatePost",
                            "Invalid Post Updates"
                        ],
                        "fullName": "Post Validation Middleware validateUpdatePost Invalid Post Updates should reject content that is too long",
                        "status": "passed",
                        "title": "should reject content that is too long",
                        "duration": 0.6313000000000102,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validatePostQuery",
                            "Valid Query Parameters"
                        ],
                        "fullName": "Post Validation Middleware validatePostQuery Valid Query Parameters should pass validation with default parameters",
                        "status": "passed",
                        "title": "should pass validation with default parameters",
                        "duration": 0.886099999999999,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validatePostQuery",
                            "Valid Query Parameters"
                        ],
                        "fullName": "Post Validation Middleware validatePostQuery Valid Query Parameters should pass validation with valid page and limit",
                        "status": "passed",
                        "title": "should pass validation with valid page and limit",
                        "duration": 0.6244000000000369,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validatePostQuery",
                            "Valid Query Parameters"
                        ],
                        "fullName": "Post Validation Middleware validatePostQuery Valid Query Parameters should pass validation with userId filter",
                        "status": "passed",
                        "title": "should pass validation with userId filter",
                        "duration": 1.6030000000000086,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validatePostQuery",
                            "Invalid Query Parameters"
                        ],
                        "fullName": "Post Validation Middleware validatePostQuery Invalid Query Parameters should reject page number that is too high",
                        "status": "passed",
                        "title": "should reject page number that is too high",
                        "duration": 0.7368000000000166,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validatePostQuery",
                            "Invalid Query Parameters"
                        ],
                        "fullName": "Post Validation Middleware validatePostQuery Invalid Query Parameters should reject negative page number",
                        "status": "passed",
                        "title": "should reject negative page number",
                        "duration": 0.6662000000000035,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validatePostQuery",
                            "Invalid Query Parameters"
                        ],
                        "fullName": "Post Validation Middleware validatePostQuery Invalid Query Parameters should reject limit that is too high",
                        "status": "passed",
                        "title": "should reject limit that is too high",
                        "duration": 0.6064000000000078,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validatePostQuery",
                            "Invalid Query Parameters"
                        ],
                        "fullName": "Post Validation Middleware validatePostQuery Invalid Query Parameters should reject zero limit",
                        "status": "passed",
                        "title": "should reject zero limit",
                        "duration": 0.5305999999999926,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validatePostId",
                            "Valid Post IDs"
                        ],
                        "fullName": "Post Validation Middleware validatePostId Valid Post IDs should pass validation with valid post ID",
                        "status": "passed",
                        "title": "should pass validation with valid post ID",
                        "duration": 0.5528999999999655,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validatePostId",
                            "Valid Post IDs"
                        ],
                        "fullName": "Post Validation Middleware validatePostId Valid Post IDs should pass validation with alphanumeric ID",
                        "status": "passed",
                        "title": "should pass validation with alphanumeric ID",
                        "duration": 0.40739999999999554,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validatePostId",
                            "Invalid Post IDs"
                        ],
                        "fullName": "Post Validation Middleware validatePostId Invalid Post IDs should reject empty post ID",
                        "status": "passed",
                        "title": "should reject empty post ID",
                        "duration": 0.9652999999999565,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validatePostId",
                            "Invalid Post IDs"
                        ],
                        "fullName": "Post Validation Middleware validatePostId Invalid Post IDs should reject missing post ID",
                        "status": "passed",
                        "title": "should reject missing post ID",
                        "duration": 0.689200000000028,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "validatePostId",
                            "Invalid Post IDs"
                        ],
                        "fullName": "Post Validation Middleware validatePostId Invalid Post IDs should reject ID that is too long",
                        "status": "passed",
                        "title": "should reject ID that is too long",
                        "duration": 0.6526000000000067,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Validation Middleware",
                            "Error Handling"
                        ],
                        "fullName": "Post Validation Middleware Error Handling should handle internal server errors gracefully",
                        "status": "passed",
                        "title": "should handle internal server errors gracefully",
                        "duration": 1.1019999999999754,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633502661,
                "endTime": 1751633502704.102,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/middleware/postValidationMiddleware.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Authentication Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware Authentication Rate Limiting should allow requests within the limit (5 per minute)",
                        "status": "passed",
                        "title": "should allow requests within the limit (5 per minute)",
                        "duration": 147.28830000000005,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Authentication Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware Authentication Rate Limiting should block requests exceeding the limit (6th request)",
                        "status": "passed",
                        "title": "should block requests exceeding the limit (6th request)",
                        "duration": 505.61580000000015,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Authentication Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware Authentication Rate Limiting should include rate limit headers",
                        "status": "passed",
                        "title": "should include rate limit headers",
                        "duration": 119.75700000000006,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Authentication Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware Authentication Rate Limiting should use IP address for rate limiting when user not authenticated",
                        "status": "passed",
                        "title": "should use IP address for rate limiting when user not authenticated",
                        "duration": 470.7682000000002,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Post Creation Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware Post Creation Rate Limiting should allow 10 posts per hour for authenticated users",
                        "status": "passed",
                        "title": "should allow 10 posts per hour for authenticated users",
                        "duration": 138.03489999999988,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Post Creation Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware Post Creation Rate Limiting should block 11th post creation request",
                        "status": "passed",
                        "title": "should block 11th post creation request",
                        "duration": 784.5790000000002,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Post Creation Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware Post Creation Rate Limiting should use user ID for rate limiting when authenticated",
                        "status": "pending",
                        "title": "should use user ID for rate limiting when authenticated",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Post Creation Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware Post Creation Rate Limiting should fall back to IP when user not authenticated",
                        "status": "pending",
                        "title": "should fall back to IP when user not authenticated",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Follow Operation Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware Follow Operation Rate Limiting should allow 20 follow operations per hour",
                        "status": "pending",
                        "title": "should allow 20 follow operations per hour",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Follow Operation Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware Follow Operation Rate Limiting should block 21st follow operation",
                        "status": "pending",
                        "title": "should block 21st follow operation",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Media Upload Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware Media Upload Rate Limiting should allow 20 uploads per hour",
                        "status": "pending",
                        "title": "should allow 20 uploads per hour",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Media Upload Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware Media Upload Rate Limiting should block 21st media upload",
                        "status": "pending",
                        "title": "should block 21st media upload",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "General API Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware General API Rate Limiting should allow 100 requests per minute",
                        "status": "pending",
                        "title": "should allow 100 requests per minute",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "General API Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware General API Rate Limiting should block 101st general API request",
                        "status": "pending",
                        "title": "should block 101st general API request",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "General API Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware General API Rate Limiting should use IP address for general rate limiting",
                        "status": "pending",
                        "title": "should use IP address for general rate limiting",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Password Reset Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware Password Reset Rate Limiting should allow 3 password reset attempts per hour",
                        "status": "pending",
                        "title": "should allow 3 password reset attempts per hour",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Password Reset Rate Limiting"
                        ],
                        "fullName": "Rate Limiting Middleware Password Reset Rate Limiting should block 4th password reset attempt",
                        "status": "pending",
                        "title": "should block 4th password reset attempt",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Error Response Format"
                        ],
                        "fullName": "Rate Limiting Middleware Error Response Format should return consistent error format for all rate limits",
                        "status": "pending",
                        "title": "should return consistent error format for all rate limits",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Error Response Format"
                        ],
                        "fullName": "Rate Limiting Middleware Error Response Format should include retry after information",
                        "status": "pending",
                        "title": "should include retry after information",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Rate Limit Configuration"
                        ],
                        "fullName": "Rate Limiting Middleware Rate Limit Configuration should export correct configuration values",
                        "status": "pending",
                        "title": "should export correct configuration values",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting Middleware",
                            "Rate Limit Configuration"
                        ],
                        "fullName": "Rate Limiting Middleware Rate Limit Configuration should have descriptions for all rate limit types",
                        "status": "pending",
                        "title": "should have descriptions for all rate limit types",
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633503309,
                "endTime": 1751633505475.579,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/middleware/rateLimitMiddleware.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "Rate Limiting: User ID vs IP Address",
                            "Authenticated User Rate Limiting (by User ID)"
                        ],
                        "fullName": "Rate Limiting: User ID vs IP Address Authenticated User Rate Limiting (by User ID) should track rate limits by user ID for authenticated users",
                        "status": "passed",
                        "title": "should track rate limits by user ID for authenticated users",
                        "duration": 345.4421,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting: User ID vs IP Address",
                            "Authenticated User Rate Limiting (by User ID)"
                        ],
                        "fullName": "Rate Limiting: User ID vs IP Address Authenticated User Rate Limiting (by User ID) should allow different users to have separate rate limits",
                        "status": "passed",
                        "title": "should allow different users to have separate rate limits",
                        "duration": 318.54240000000004,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting: User ID vs IP Address",
                            "Anonymous User Rate Limiting (by IP Address)"
                        ],
                        "fullName": "Rate Limiting: User ID vs IP Address Anonymous User Rate Limiting (by IP Address) should track rate limits by IP address for anonymous users",
                        "status": "passed",
                        "title": "should track rate limits by IP address for anonymous users",
                        "duration": 307.7237,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting: User ID vs IP Address",
                            "Anonymous User Rate Limiting (by IP Address)"
                        ],
                        "fullName": "Rate Limiting: User ID vs IP Address Anonymous User Rate Limiting (by IP Address) should allow different IP addresses to have separate rate limits",
                        "status": "passed",
                        "title": "should allow different IP addresses to have separate rate limits",
                        "duration": 274.2577000000001,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting: User ID vs IP Address",
                            "User ID vs IP Priority"
                        ],
                        "fullName": "Rate Limiting: User ID vs IP Address User ID vs IP Priority should prioritize user ID over IP address when user is authenticated",
                        "status": "passed",
                        "title": "should prioritize user ID over IP address when user is authenticated",
                        "duration": 111.13599999999997,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting: User ID vs IP Address",
                            "User ID vs IP Priority"
                        ],
                        "fullName": "Rate Limiting: User ID vs IP Address User ID vs IP Priority should demonstrate same user from different IPs shares rate limit",
                        "status": "passed",
                        "title": "should demonstrate same user from different IPs shares rate limit",
                        "duration": 436.93939999999975,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Rate Limiting: User ID vs IP Address",
                            "Fallback Behavior"
                        ],
                        "fullName": "Rate Limiting: User ID vs IP Address Fallback Behavior should fallback to IP when user ID is not available",
                        "status": "passed",
                        "title": "should fallback to IP when user ID is not available",
                        "duration": 112.36709999999994,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633503267,
                "endTime": 1751633505174.3672,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/middleware/rateLimitUserVsIP.test.ts"
            },
            {
                "assertionResults": [],
                "startTime": 1751633501321,
                "endTime": 1751633501321,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/middleware/securityValidationMiddleware.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "isReadyToPublish()"
                        ],
                        "fullName": "Post Business Logic Methods isReadyToPublish() should return false for already published posts",
                        "status": "passed",
                        "title": "should return false for already published posts",
                        "duration": 2.42349999999999,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "isReadyToPublish()"
                        ],
                        "fullName": "Post Business Logic Methods isReadyToPublish() should return true for draft posts with content",
                        "status": "passed",
                        "title": "should return true for draft posts with content",
                        "duration": 0.43369999999998754,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "isReadyToPublish()"
                        ],
                        "fullName": "Post Business Logic Methods isReadyToPublish() should return false for posts with empty content",
                        "status": "passed",
                        "title": "should return false for posts with empty content",
                        "duration": 0.3428000000000111,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "isReadyToPublish()"
                        ],
                        "fullName": "Post Business Logic Methods isReadyToPublish() should return false for posts with only whitespace content",
                        "status": "passed",
                        "title": "should return false for posts with only whitespace content",
                        "duration": 0.31510000000002947,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "isReadyToPublish()"
                        ],
                        "fullName": "Post Business Logic Methods isReadyToPublish() should return false for scheduled posts with future dates",
                        "status": "passed",
                        "title": "should return false for scheduled posts with future dates",
                        "duration": 0.5009000000000015,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "isReadyToPublish()"
                        ],
                        "fullName": "Post Business Logic Methods isReadyToPublish() should return true for scheduled posts with past dates",
                        "status": "passed",
                        "title": "should return true for scheduled posts with past dates",
                        "duration": 0.3299000000000092,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "isDraft()"
                        ],
                        "fullName": "Post Business Logic Methods isDraft() should return true for unpublished, unscheduled posts",
                        "status": "passed",
                        "title": "should return true for unpublished, unscheduled posts",
                        "duration": 0.24680000000000746,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "isDraft()"
                        ],
                        "fullName": "Post Business Logic Methods isDraft() should return false for published posts",
                        "status": "passed",
                        "title": "should return false for published posts",
                        "duration": 0.1776999999999589,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "isDraft()"
                        ],
                        "fullName": "Post Business Logic Methods isDraft() should return false for scheduled posts",
                        "status": "passed",
                        "title": "should return false for scheduled posts",
                        "duration": 0.46469999999999345,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "isScheduledPost()"
                        ],
                        "fullName": "Post Business Logic Methods isScheduledPost() should return true for scheduled posts with future dates",
                        "status": "passed",
                        "title": "should return true for scheduled posts with future dates",
                        "duration": 0.2897000000000389,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "isScheduledPost()"
                        ],
                        "fullName": "Post Business Logic Methods isScheduledPost() should return false for scheduled posts with past dates",
                        "status": "passed",
                        "title": "should return false for scheduled posts with past dates",
                        "duration": 0.18029999999998836,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "isScheduledPost()"
                        ],
                        "fullName": "Post Business Logic Methods isScheduledPost() should return false for unscheduled posts",
                        "status": "passed",
                        "title": "should return false for unscheduled posts",
                        "duration": 0.14990000000000236,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "isScheduledPost()"
                        ],
                        "fullName": "Post Business Logic Methods isScheduledPost() should return false for scheduled posts without scheduledFor date",
                        "status": "passed",
                        "title": "should return false for scheduled posts without scheduledFor date",
                        "duration": 0.17140000000000555,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "hasExpiredSchedule()"
                        ],
                        "fullName": "Post Business Logic Methods hasExpiredSchedule() should return true for scheduled posts with past dates",
                        "status": "passed",
                        "title": "should return true for scheduled posts with past dates",
                        "duration": 0.189200000000028,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "hasExpiredSchedule()"
                        ],
                        "fullName": "Post Business Logic Methods hasExpiredSchedule() should return false for scheduled posts with future dates",
                        "status": "passed",
                        "title": "should return false for scheduled posts with future dates",
                        "duration": 0.176400000000001,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "hasExpiredSchedule()"
                        ],
                        "fullName": "Post Business Logic Methods hasExpiredSchedule() should return false for unscheduled posts",
                        "status": "passed",
                        "title": "should return false for unscheduled posts",
                        "duration": 0.15210000000001855,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "hasExpiredSchedule()"
                        ],
                        "fullName": "Post Business Logic Methods hasExpiredSchedule() should return false for scheduled posts without scheduledFor date",
                        "status": "passed",
                        "title": "should return false for scheduled posts without scheduledFor date",
                        "duration": 0.1470000000000482,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "getContentPreview()"
                        ],
                        "fullName": "Post Business Logic Methods getContentPreview() should return full content when shorter than limit",
                        "status": "passed",
                        "title": "should return full content when shorter than limit",
                        "duration": 0.1916999999999689,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "getContentPreview()"
                        ],
                        "fullName": "Post Business Logic Methods getContentPreview() should return full content when exactly at limit",
                        "status": "passed",
                        "title": "should return full content when exactly at limit",
                        "duration": 0.32679999999999154,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "getContentPreview()"
                        ],
                        "fullName": "Post Business Logic Methods getContentPreview() should truncate content longer than limit",
                        "status": "passed",
                        "title": "should truncate content longer than limit",
                        "duration": 0.45329999999995607,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "getContentPreview()"
                        ],
                        "fullName": "Post Business Logic Methods getContentPreview() should truncate at word boundaries when possible",
                        "status": "passed",
                        "title": "should truncate at word boundaries when possible",
                        "duration": 0.32550000000003365,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "getContentPreview()"
                        ],
                        "fullName": "Post Business Logic Methods getContentPreview() should use default limit of 280 characters",
                        "status": "passed",
                        "title": "should use default limit of 280 characters",
                        "duration": 0.26710000000002765,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "getContentPreview()"
                        ],
                        "fullName": "Post Business Logic Methods getContentPreview() should handle custom length limits",
                        "status": "passed",
                        "title": "should handle custom length limits",
                        "duration": 0.3139000000000465,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "generateActivityId()"
                        ],
                        "fullName": "Post Business Logic Methods generateActivityId() should generate correct ActivityPub URI format",
                        "status": "passed",
                        "title": "should generate correct ActivityPub URI format",
                        "duration": 0.2954000000000292,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "generateActivityId()"
                        ],
                        "fullName": "Post Business Logic Methods generateActivityId() should handle different domains",
                        "status": "passed",
                        "title": "should handle different domains",
                        "duration": 0.25300000000004275,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "generateActivityId()"
                        ],
                        "fullName": "Post Business Logic Methods generateActivityId() should work with complex post IDs",
                        "status": "passed",
                        "title": "should work with complex post IDs",
                        "duration": 0.24660000000000082,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "toPublicPost()"
                        ],
                        "fullName": "Post Business Logic Methods toPublicPost() should convert published post to public format",
                        "status": "passed",
                        "title": "should convert published post to public format",
                        "duration": 1.1831999999999994,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "toPublicPost()"
                        ],
                        "fullName": "Post Business Logic Methods toPublicPost() should work without media attachments",
                        "status": "passed",
                        "title": "should work without media attachments",
                        "duration": 0.30260000000004084,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "toPublicPost()"
                        ],
                        "fullName": "Post Business Logic Methods toPublicPost() should handle null content warning",
                        "status": "passed",
                        "title": "should handle null content warning",
                        "duration": 0.3185999999999467,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "toPublicPost()"
                        ],
                        "fullName": "Post Business Logic Methods toPublicPost() should throw error for unpublished posts",
                        "status": "passed",
                        "title": "should throw error for unpublished posts",
                        "duration": 1.3614999999999782,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "toPublicPost()"
                        ],
                        "fullName": "Post Business Logic Methods toPublicPost() should throw error for posts without publishedAt date",
                        "status": "passed",
                        "title": "should throw error for posts without publishedAt date",
                        "duration": 0.4293999999999869,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "toDraft()"
                        ],
                        "fullName": "Post Business Logic Methods toDraft() should convert post to draft format",
                        "status": "passed",
                        "title": "should convert post to draft format",
                        "duration": 0.6078999999999724,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "toDraft()"
                        ],
                        "fullName": "Post Business Logic Methods toDraft() should handle null values correctly",
                        "status": "passed",
                        "title": "should handle null values correctly",
                        "duration": 0.32459999999997535,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "toSummary()"
                        ],
                        "fullName": "Post Business Logic Methods toSummary() should convert published post to summary format",
                        "status": "passed",
                        "title": "should convert published post to summary format",
                        "duration": 0.41700000000003,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "toSummary()"
                        ],
                        "fullName": "Post Business Logic Methods toSummary() should default mediaCount to 0",
                        "status": "passed",
                        "title": "should default mediaCount to 0",
                        "duration": 0.262299999999982,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "toSummary()"
                        ],
                        "fullName": "Post Business Logic Methods toSummary() should set hasContentWarning to false for null warning",
                        "status": "passed",
                        "title": "should set hasContentWarning to false for null warning",
                        "duration": 0.32840000000004466,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "toSummary()"
                        ],
                        "fullName": "Post Business Logic Methods toSummary() should set hasContentWarning to true for empty string warning",
                        "status": "passed",
                        "title": "should set hasContentWarning to true for empty string warning",
                        "duration": 0.3281000000000063,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "toSummary()"
                        ],
                        "fullName": "Post Business Logic Methods toSummary() should throw error for unpublished posts",
                        "status": "passed",
                        "title": "should throw error for unpublished posts",
                        "duration": 0.4715999999999667,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "update()"
                        ],
                        "fullName": "Post Business Logic Methods update() should update post content",
                        "status": "passed",
                        "title": "should update post content",
                        "duration": 0.5235000000000127,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "update()"
                        ],
                        "fullName": "Post Business Logic Methods update() should update content warning",
                        "status": "passed",
                        "title": "should update content warning",
                        "duration": 0.28539999999998145,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "update()"
                        ],
                        "fullName": "Post Business Logic Methods update() should clear content warning with null",
                        "status": "passed",
                        "title": "should clear content warning with null",
                        "duration": 0.276800000000037,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "update()"
                        ],
                        "fullName": "Post Business Logic Methods update() should update publishing status",
                        "status": "passed",
                        "title": "should update publishing status",
                        "duration": 0.44830000000001746,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "update()"
                        ],
                        "fullName": "Post Business Logic Methods update() should set publishedAt when publishing for first time",
                        "status": "passed",
                        "title": "should set publishedAt when publishing for first time",
                        "duration": 0.34960000000000946,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "update()"
                        ],
                        "fullName": "Post Business Logic Methods update() should not change publishedAt when already published",
                        "status": "passed",
                        "title": "should not change publishedAt when already published",
                        "duration": 0.3199000000000183,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "update()"
                        ],
                        "fullName": "Post Business Logic Methods update() should preserve unchanged fields",
                        "status": "passed",
                        "title": "should preserve unchanged fields",
                        "duration": 0.7257999999999925,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Business Logic Methods",
                            "update()"
                        ],
                        "fullName": "Post Business Logic Methods update() should return new Post instance",
                        "status": "passed",
                        "title": "should return new Post instance",
                        "duration": 0.9956999999999994,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633503112,
                "endTime": 1751633503133.9956,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/models/Post.businessLogic.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Draft → Published Workflow"
                        ],
                        "fullName": "Post State Transitions Draft → Published Workflow should transition from draft to published",
                        "status": "passed",
                        "title": "should transition from draft to published",
                        "duration": 1.9250000000000114,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Draft → Published Workflow"
                        ],
                        "fullName": "Post State Transitions Draft → Published Workflow should set publishedAt timestamp when transitioning to published",
                        "status": "passed",
                        "title": "should set publishedAt timestamp when transitioning to published",
                        "duration": 1.016900000000021,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Draft → Published Workflow"
                        ],
                        "fullName": "Post State Transitions Draft → Published Workflow should allow editing content before publishing",
                        "status": "passed",
                        "title": "should allow editing content before publishing",
                        "duration": 0.4440999999999917,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Draft → Published Workflow"
                        ],
                        "fullName": "Post State Transitions Draft → Published Workflow should preserve other fields during draft to published transition",
                        "status": "passed",
                        "title": "should preserve other fields during draft to published transition",
                        "duration": 0.32459999999997535,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Draft → Scheduled → Published Workflow"
                        ],
                        "fullName": "Post State Transitions Draft → Scheduled → Published Workflow should transition from draft to scheduled",
                        "status": "passed",
                        "title": "should transition from draft to scheduled",
                        "duration": 0.42109999999996717,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Draft → Scheduled → Published Workflow"
                        ],
                        "fullName": "Post State Transitions Draft → Scheduled → Published Workflow should detect when scheduled post is ready to publish",
                        "status": "passed",
                        "title": "should detect when scheduled post is ready to publish",
                        "duration": 0.33939999999995507,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Draft → Scheduled → Published Workflow"
                        ],
                        "fullName": "Post State Transitions Draft → Scheduled → Published Workflow should transition from expired scheduled to published",
                        "status": "passed",
                        "title": "should transition from expired scheduled to published",
                        "duration": 0.3299000000000092,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Draft → Scheduled → Published Workflow"
                        ],
                        "fullName": "Post State Transitions Draft → Scheduled → Published Workflow should preserve scheduled metadata when publishing",
                        "status": "passed",
                        "title": "should preserve scheduled metadata when publishing",
                        "duration": 0.2687999999999988,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Published Post State Management"
                        ],
                        "fullName": "Post State Transitions Published Post State Management should prevent transition from published back to draft",
                        "status": "passed",
                        "title": "should prevent transition from published back to draft",
                        "duration": 0.43029999999998836,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Published Post State Management"
                        ],
                        "fullName": "Post State Transitions Published Post State Management should allow content updates on published posts",
                        "status": "passed",
                        "title": "should allow content updates on published posts",
                        "duration": 0.2810999999999808,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Published Post State Management"
                        ],
                        "fullName": "Post State Transitions Published Post State Management should allow content warning updates on published posts",
                        "status": "passed",
                        "title": "should allow content warning updates on published posts",
                        "duration": 0.21210000000002083,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Schedule Management Workflows"
                        ],
                        "fullName": "Post State Transitions Schedule Management Workflows should handle scheduling future posts",
                        "status": "passed",
                        "title": "should handle scheduling future posts",
                        "duration": 0.39519999999998845,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Schedule Management Workflows"
                        ],
                        "fullName": "Post State Transitions Schedule Management Workflows should handle rescheduling posts",
                        "status": "passed",
                        "title": "should handle rescheduling posts",
                        "duration": 0.3432999999999993,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Schedule Management Workflows"
                        ],
                        "fullName": "Post State Transitions Schedule Management Workflows should handle canceling scheduled posts (back to draft)",
                        "status": "passed",
                        "title": "should handle canceling scheduled posts (back to draft)",
                        "duration": 0.38290000000000646,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Edge Cases and Error States"
                        ],
                        "fullName": "Post State Transitions Edge Cases and Error States should handle posts with invalid scheduling state",
                        "status": "passed",
                        "title": "should handle posts with invalid scheduling state",
                        "duration": 0.2185999999999808,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Edge Cases and Error States"
                        ],
                        "fullName": "Post State Transitions Edge Cases and Error States should handle posts with past scheduled dates",
                        "status": "passed",
                        "title": "should handle posts with past scheduled dates",
                        "duration": 0.248800000000017,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Edge Cases and Error States"
                        ],
                        "fullName": "Post State Transitions Edge Cases and Error States should handle posts with inconsistent published state",
                        "status": "passed",
                        "title": "should handle posts with inconsistent published state",
                        "duration": 1.0143999999999664,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "Edge Cases and Error States"
                        ],
                        "fullName": "Post State Transitions Edge Cases and Error States should handle empty content in state transitions",
                        "status": "passed",
                        "title": "should handle empty content in state transitions",
                        "duration": 0.31929999999999836,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "State Transition Timing"
                        ],
                        "fullName": "Post State Transitions State Transition Timing should handle boundary conditions for scheduling",
                        "status": "passed",
                        "title": "should handle boundary conditions for scheduling",
                        "duration": 0.23390000000000555,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post State Transitions",
                            "State Transition Timing"
                        ],
                        "fullName": "Post State Transitions State Transition Timing should handle multiple rapid state changes",
                        "status": "passed",
                        "title": "should handle multiple rapid state changes",
                        "duration": 0.39550000000002683,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633504464,
                "endTime": 1751633504475.3955,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/models/Post.stateTransitions.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Content Validation"
                        ],
                        "fullName": "Post Creation Validation Content Validation should accept valid content within character limits",
                        "status": "passed",
                        "title": "should accept valid content within character limits",
                        "duration": 3.288099999999986,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Content Validation"
                        ],
                        "fullName": "Post Creation Validation Content Validation should reject empty content",
                        "status": "passed",
                        "title": "should reject empty content",
                        "duration": 0.8167000000000257,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Content Validation"
                        ],
                        "fullName": "Post Creation Validation Content Validation should reject content that is only whitespace",
                        "status": "passed",
                        "title": "should reject content that is only whitespace",
                        "duration": 0.7413999999999987,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Content Validation"
                        ],
                        "fullName": "Post Creation Validation Content Validation should reject content exceeding 5000 characters",
                        "status": "passed",
                        "title": "should reject content exceeding 5000 characters",
                        "duration": 0.39819999999997435,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Content Validation"
                        ],
                        "fullName": "Post Creation Validation Content Validation should accept content exactly at 5000 character limit",
                        "status": "passed",
                        "title": "should accept content exactly at 5000 character limit",
                        "duration": 0.38239999999996144,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Content Validation"
                        ],
                        "fullName": "Post Creation Validation Content Validation should trim whitespace from content",
                        "status": "passed",
                        "title": "should trim whitespace from content",
                        "duration": 0.38369999999997617,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Content Warning Validation"
                        ],
                        "fullName": "Post Creation Validation Content Warning Validation should accept valid content warning",
                        "status": "passed",
                        "title": "should accept valid content warning",
                        "duration": 0.2563000000000102,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Content Warning Validation"
                        ],
                        "fullName": "Post Creation Validation Content Warning Validation should accept empty string as content warning",
                        "status": "passed",
                        "title": "should accept empty string as content warning",
                        "duration": 0.23349999999999227,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Content Warning Validation"
                        ],
                        "fullName": "Post Creation Validation Content Warning Validation should accept missing content warning field",
                        "status": "passed",
                        "title": "should accept missing content warning field",
                        "duration": 0.4175000000000182,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Content Warning Validation"
                        ],
                        "fullName": "Post Creation Validation Content Warning Validation should reject content warning exceeding 200 characters",
                        "status": "passed",
                        "title": "should reject content warning exceeding 200 characters",
                        "duration": 0.6646000000000072,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Content Warning Validation"
                        ],
                        "fullName": "Post Creation Validation Content Warning Validation should accept content warning exactly at 200 character limit",
                        "status": "passed",
                        "title": "should accept content warning exactly at 200 character limit",
                        "duration": 0.2381000000000313,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Content Warning Validation"
                        ],
                        "fullName": "Post Creation Validation Content Warning Validation should trim whitespace from content warning",
                        "status": "passed",
                        "title": "should trim whitespace from content warning",
                        "duration": 0.21910000000002583,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Scheduled Post Validation"
                        ],
                        "fullName": "Post Creation Validation Scheduled Post Validation should accept scheduled post with future date",
                        "status": "passed",
                        "title": "should accept scheduled post with future date",
                        "duration": 1.2588999999999828,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Scheduled Post Validation"
                        ],
                        "fullName": "Post Creation Validation Scheduled Post Validation should reject scheduled post without scheduledFor date",
                        "status": "passed",
                        "title": "should reject scheduled post without scheduledFor date",
                        "duration": 0.4311000000000149,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Scheduled Post Validation"
                        ],
                        "fullName": "Post Creation Validation Scheduled Post Validation should reject scheduled post with past date",
                        "status": "passed",
                        "title": "should reject scheduled post with past date",
                        "duration": 0.4064999999999941,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Scheduled Post Validation"
                        ],
                        "fullName": "Post Creation Validation Scheduled Post Validation should reject scheduled post with invalid date format",
                        "status": "passed",
                        "title": "should reject scheduled post with invalid date format",
                        "duration": 0.2862999999999829,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Scheduled Post Validation"
                        ],
                        "fullName": "Post Creation Validation Scheduled Post Validation should accept non-scheduled post with scheduledFor date",
                        "status": "passed",
                        "title": "should accept non-scheduled post with scheduledFor date",
                        "duration": 0.25720000000001164,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Publishing Status Validation"
                        ],
                        "fullName": "Post Creation Validation Publishing Status Validation should default isPublished to true",
                        "status": "passed",
                        "title": "should default isPublished to true",
                        "duration": 0.19720000000000937,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Publishing Status Validation"
                        ],
                        "fullName": "Post Creation Validation Publishing Status Validation should accept explicit isPublished false for drafts",
                        "status": "passed",
                        "title": "should accept explicit isPublished false for drafts",
                        "duration": 0.20079999999995835,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Publishing Status Validation"
                        ],
                        "fullName": "Post Creation Validation Publishing Status Validation should default isScheduled to false",
                        "status": "passed",
                        "title": "should default isScheduled to false",
                        "duration": 0.1852000000000089,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Complex Validation Scenarios"
                        ],
                        "fullName": "Post Creation Validation Complex Validation Scenarios should accept draft scheduled post",
                        "status": "passed",
                        "title": "should accept draft scheduled post",
                        "duration": 0.28949999999997544,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Complex Validation Scenarios"
                        ],
                        "fullName": "Post Creation Validation Complex Validation Scenarios should accept maximum length content with maximum length warning",
                        "status": "passed",
                        "title": "should accept maximum length content with maximum length warning",
                        "duration": 0.22849999999999682,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Creation Validation",
                            "Complex Validation Scenarios"
                        ],
                        "fullName": "Post Creation Validation Complex Validation Scenarios should handle null scheduledFor appropriately",
                        "status": "passed",
                        "title": "should handle null scheduledFor appropriately",
                        "duration": 0.22030000000000882,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Model Construction"
                        ],
                        "fullName": "Post Model Construction should create Post instance with valid data",
                        "status": "passed",
                        "title": "should create Post instance with valid data",
                        "duration": 0.26190000000002556,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Model Construction"
                        ],
                        "fullName": "Post Model Construction should handle optional fields correctly",
                        "status": "passed",
                        "title": "should handle optional fields correctly",
                        "duration": 0.1564000000000192,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Post Model Construction"
                        ],
                        "fullName": "Post Model Construction should convert undefined optional fields to null",
                        "status": "passed",
                        "title": "should convert undefined optional fields to null",
                        "duration": 0.19709999999997763,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633505122,
                "endTime": 1751633505135.262,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/models/Post.validation.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "User Constructor"
                        ],
                        "fullName": "User Model - Class Constructor and Methods User Constructor should create user with all provided data",
                        "status": "passed",
                        "title": "should create user with all provided data",
                        "duration": 2.4026000000000067,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "User Constructor"
                        ],
                        "fullName": "User Model - Class Constructor and Methods User Constructor should create user with minimal required data",
                        "status": "passed",
                        "title": "should create user with minimal required data",
                        "duration": 0.40280000000001337,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "User Constructor"
                        ],
                        "fullName": "User Model - Class Constructor and Methods User Constructor should handle displayName defaulting to username when not provided",
                        "status": "passed",
                        "title": "should handle displayName defaulting to username when not provided",
                        "duration": 0.150100000000009,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "User Constructor"
                        ],
                        "fullName": "User Model - Class Constructor and Methods User Constructor should use provided displayName over username when both exist",
                        "status": "passed",
                        "title": "should use provided displayName over username when both exist",
                        "duration": 0.175200000000018,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "User Constructor"
                        ],
                        "fullName": "User Model - Class Constructor and Methods User Constructor should handle empty string values properly",
                        "status": "passed",
                        "title": "should handle empty string values properly",
                        "duration": 0.21710000000001628,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "User Constructor"
                        ],
                        "fullName": "User Model - Class Constructor and Methods User Constructor should handle null values properly",
                        "status": "passed",
                        "title": "should handle null values properly",
                        "duration": 0.30110000000001946,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "User Constructor"
                        ],
                        "fullName": "User Model - Class Constructor and Methods User Constructor should handle undefined values properly",
                        "status": "passed",
                        "title": "should handle undefined values properly",
                        "duration": 0.40589999999997417,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "getPublicProfile Method"
                        ],
                        "fullName": "User Model - Class Constructor and Methods getPublicProfile Method should return public profile data excluding sensitive information",
                        "status": "passed",
                        "title": "should return public profile data excluding sensitive information",
                        "duration": 2.057900000000018,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "getPublicProfile Method"
                        ],
                        "fullName": "User Model - Class Constructor and Methods getPublicProfile Method should return public profile with default values",
                        "status": "passed",
                        "title": "should return public profile with default values",
                        "duration": 0.49720000000002074,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "getPublicProfile Method"
                        ],
                        "fullName": "User Model - Class Constructor and Methods getPublicProfile Method should handle null values in public profile",
                        "status": "passed",
                        "title": "should handle null values in public profile",
                        "duration": 0.247099999999989,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "getPrivateProfile Method"
                        ],
                        "fullName": "User Model - Class Constructor and Methods getPrivateProfile Method should return private profile data including all information",
                        "status": "passed",
                        "title": "should return private profile data including all information",
                        "duration": 1.5049000000000206,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "getPrivateProfile Method"
                        ],
                        "fullName": "User Model - Class Constructor and Methods getPrivateProfile Method should return private profile with default values",
                        "status": "passed",
                        "title": "should return private profile with default values",
                        "duration": 0.29649999999998045,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "getPrivateProfile Method"
                        ],
                        "fullName": "User Model - Class Constructor and Methods getPrivateProfile Method should include all fields from public profile",
                        "status": "passed",
                        "title": "should include all fields from public profile",
                        "duration": 0.44589999999999463,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "Static Validation Methods"
                        ],
                        "fullName": "User Model - Class Constructor and Methods Static Validation Methods should have validateRegistration static method",
                        "status": "passed",
                        "title": "should have validateRegistration static method",
                        "duration": 1.6838000000000193,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "Static Validation Methods"
                        ],
                        "fullName": "User Model - Class Constructor and Methods Static Validation Methods should have validateLogin static method",
                        "status": "passed",
                        "title": "should have validateLogin static method",
                        "duration": 0.3616000000000099,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "Static Validation Methods"
                        ],
                        "fullName": "User Model - Class Constructor and Methods Static Validation Methods should have validateProfileUpdate static method",
                        "status": "passed",
                        "title": "should have validateProfileUpdate static method",
                        "duration": 0.47809999999998354,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "Edge Cases and Error Handling"
                        ],
                        "fullName": "User Model - Class Constructor and Methods Edge Cases and Error Handling should handle data object with extra properties",
                        "status": "passed",
                        "title": "should handle data object with extra properties",
                        "duration": 0.35899999999998045,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "Edge Cases and Error Handling"
                        ],
                        "fullName": "User Model - Class Constructor and Methods Edge Cases and Error Handling should handle boolean values correctly",
                        "status": "passed",
                        "title": "should handle boolean values correctly",
                        "duration": 0.19499999999999318,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "User Model - Class Constructor and Methods",
                            "Edge Cases and Error Handling"
                        ],
                        "fullName": "User Model - Class Constructor and Methods Edge Cases and Error Handling should handle different verification tiers",
                        "status": "passed",
                        "title": "should handle different verification tiers",
                        "duration": 0.14789999999999281,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633504816,
                "endTime": 1751633504830.195,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/models/User.class.test.ts"
            },
            {
                "assertionResults": [],
                "startTime": 1751633501321,
                "endTime": 1751633501321,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/models/User.login.test.ts"
            },
            {
                "assertionResults": [],
                "startTime": 1751633501321,
                "endTime": 1751633501321,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/models/User.profileUpdate.test.ts"
            },
            {
                "assertionResults": [],
                "startTime": 1751633501321,
                "endTime": 1751633501321,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/models/User.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "create()"
                        ],
                        "fullName": "FollowRepository Unit Tests create() should create follow relationship with local user ID",
                        "status": "passed",
                        "title": "should create follow relationship with local user ID",
                        "duration": 3.7510999999999513,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "create()"
                        ],
                        "fullName": "FollowRepository Unit Tests create() should create follow relationship with ActivityPub actor ID",
                        "status": "passed",
                        "title": "should create follow relationship with ActivityPub actor ID",
                        "duration": 0.6918000000000006,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "create()"
                        ],
                        "fullName": "FollowRepository Unit Tests create() should handle Prisma creation errors",
                        "status": "passed",
                        "title": "should handle Prisma creation errors",
                        "duration": 1.338700000000017,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "findByFollowerAndFollowed()"
                        ],
                        "fullName": "FollowRepository Unit Tests findByFollowerAndFollowed() should find follow relationship by local user IDs",
                        "status": "passed",
                        "title": "should find follow relationship by local user IDs",
                        "duration": 0.5298999999999978,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "findByFollowerAndFollowed()"
                        ],
                        "fullName": "FollowRepository Unit Tests findByFollowerAndFollowed() should find follow relationship by ActivityPub actor ID",
                        "status": "passed",
                        "title": "should find follow relationship by ActivityPub actor ID",
                        "duration": 0.42549999999999955,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "findByFollowerAndFollowed()"
                        ],
                        "fullName": "FollowRepository Unit Tests findByFollowerAndFollowed() should return null when follow relationship not found",
                        "status": "passed",
                        "title": "should return null when follow relationship not found",
                        "duration": 0.24879999999996016,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "deleteByFollowerAndFollowed()"
                        ],
                        "fullName": "FollowRepository Unit Tests deleteByFollowerAndFollowed() should delete existing follow relationship",
                        "status": "passed",
                        "title": "should delete existing follow relationship",
                        "duration": 0.6998999999999569,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "deleteByFollowerAndFollowed()"
                        ],
                        "fullName": "FollowRepository Unit Tests deleteByFollowerAndFollowed() should return null when trying to delete non-existent follow relationship",
                        "status": "passed",
                        "title": "should return null when trying to delete non-existent follow relationship",
                        "duration": 0.408299999999997,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "findFollowersByUserId()"
                        ],
                        "fullName": "FollowRepository Unit Tests findFollowersByUserId() should get followers with default pagination",
                        "status": "passed",
                        "title": "should get followers with default pagination",
                        "duration": 0.7271999999999821,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "findFollowersByUserId()"
                        ],
                        "fullName": "FollowRepository Unit Tests findFollowersByUserId() should handle custom pagination options",
                        "status": "passed",
                        "title": "should handle custom pagination options",
                        "duration": 1.5638000000000147,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "getFollowStats()"
                        ],
                        "fullName": "FollowRepository Unit Tests getFollowStats() should calculate follower and following counts",
                        "status": "passed",
                        "title": "should calculate follower and following counts",
                        "duration": 0.48740000000003647,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "isFollowing()"
                        ],
                        "fullName": "FollowRepository Unit Tests isFollowing() should return true when follow relationship exists",
                        "status": "passed",
                        "title": "should return true when follow relationship exists",
                        "duration": 0.19369999999997844,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "isFollowing()"
                        ],
                        "fullName": "FollowRepository Unit Tests isFollowing() should return false when follow relationship does not exist",
                        "status": "passed",
                        "title": "should return false when follow relationship does not exist",
                        "duration": 0.14800000000002456,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "isFollowing()"
                        ],
                        "fullName": "FollowRepository Unit Tests isFollowing() should return false when follow is not accepted",
                        "status": "passed",
                        "title": "should return false when follow is not accepted",
                        "duration": 0.14980000000002747,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "bulkCheckFollowing()"
                        ],
                        "fullName": "FollowRepository Unit Tests bulkCheckFollowing() should return follow status map for multiple users",
                        "status": "passed",
                        "title": "should return follow status map for multiple users",
                        "duration": 0.430499999999995,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "bulkCheckFollowing()"
                        ],
                        "fullName": "FollowRepository Unit Tests bulkCheckFollowing() should handle empty user ID array",
                        "status": "passed",
                        "title": "should handle empty user ID array",
                        "duration": 0.16650000000004184,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "findRecentFollowers()"
                        ],
                        "fullName": "FollowRepository Unit Tests findRecentFollowers() should get recent followers with default limit",
                        "status": "passed",
                        "title": "should get recent followers with default limit",
                        "duration": 0.6057999999999879,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowRepository Unit Tests",
                            "findRecentFollowers()"
                        ],
                        "fullName": "FollowRepository Unit Tests findRecentFollowers() should handle custom limit",
                        "status": "passed",
                        "title": "should handle custom limit",
                        "duration": 0.49090000000001055,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633503407,
                "endTime": 1751633503421.491,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/repositories/FollowRepository.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Successful Post Creation"
                        ],
                        "fullName": "PostRepository - Post Creation Successful Post Creation should create a basic post with minimal data",
                        "status": "passed",
                        "title": "should create a basic post with minimal data",
                        "duration": 4.848500000000001,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Successful Post Creation"
                        ],
                        "fullName": "PostRepository - Post Creation Successful Post Creation should create a post with content warning",
                        "status": "passed",
                        "title": "should create a post with content warning",
                        "duration": 2.486500000000035,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Successful Post Creation"
                        ],
                        "fullName": "PostRepository - Post Creation Successful Post Creation should create a scheduled post",
                        "status": "passed",
                        "title": "should create a scheduled post",
                        "duration": 0.5092999999999961,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Successful Post Creation"
                        ],
                        "fullName": "PostRepository - Post Creation Successful Post Creation should create a post with media attachments",
                        "status": "passed",
                        "title": "should create a post with media attachments",
                        "duration": 0.3786000000000058,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Successful Post Creation"
                        ],
                        "fullName": "PostRepository - Post Creation Successful Post Creation should include author information in response",
                        "status": "passed",
                        "title": "should include author information in response",
                        "duration": 1.0559000000000083,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Successful Post Creation"
                        ],
                        "fullName": "PostRepository - Post Creation Successful Post Creation should handle different author verification states",
                        "status": "passed",
                        "title": "should handle different author verification states",
                        "duration": 0.4187999999999761,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Post Creation with Edge Cases"
                        ],
                        "fullName": "PostRepository - Post Creation Post Creation with Edge Cases should handle posts with maximum content length",
                        "status": "passed",
                        "title": "should handle posts with maximum content length",
                        "duration": 0.8061999999999898,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Post Creation with Edge Cases"
                        ],
                        "fullName": "PostRepository - Post Creation Post Creation with Edge Cases should handle posts with special characters",
                        "status": "passed",
                        "title": "should handle posts with special characters",
                        "duration": 0.33550000000002456,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Post Creation with Edge Cases"
                        ],
                        "fullName": "PostRepository - Post Creation Post Creation with Edge Cases should handle posts with newlines and formatting",
                        "status": "passed",
                        "title": "should handle posts with newlines and formatting",
                        "duration": 0.5903000000000134,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Post Creation with Edge Cases"
                        ],
                        "fullName": "PostRepository - Post Creation Post Creation with Edge Cases should handle null optional fields correctly",
                        "status": "passed",
                        "title": "should handle null optional fields correctly",
                        "duration": 0.44570000000004484,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Database Integration"
                        ],
                        "fullName": "PostRepository - Post Creation Database Integration should pass correct include parameters to Prisma",
                        "status": "passed",
                        "title": "should pass correct include parameters to Prisma",
                        "duration": 0.6603000000000065,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Database Integration"
                        ],
                        "fullName": "PostRepository - Post Creation Database Integration should handle Prisma create response correctly",
                        "status": "passed",
                        "title": "should handle Prisma create response correctly",
                        "duration": 0.46809999999999263,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Error Handling"
                        ],
                        "fullName": "PostRepository - Post Creation Error Handling should propagate database connection errors",
                        "status": "passed",
                        "title": "should propagate database connection errors",
                        "duration": 2.659500000000037,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Error Handling"
                        ],
                        "fullName": "PostRepository - Post Creation Error Handling should propagate unique constraint violations",
                        "status": "passed",
                        "title": "should propagate unique constraint violations",
                        "duration": 1.0225000000000364,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Error Handling"
                        ],
                        "fullName": "PostRepository - Post Creation Error Handling should propagate foreign key constraint violations",
                        "status": "passed",
                        "title": "should propagate foreign key constraint violations",
                        "duration": 0.6380000000000337,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Error Handling"
                        ],
                        "fullName": "PostRepository - Post Creation Error Handling should handle invalid data type errors",
                        "status": "passed",
                        "title": "should handle invalid data type errors",
                        "duration": 0.46649999999999636,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Performance and Optimization"
                        ],
                        "fullName": "PostRepository - Post Creation Performance and Optimization should call database create method exactly once",
                        "status": "passed",
                        "title": "should call database create method exactly once",
                        "duration": 0.3451999999999771,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Performance and Optimization"
                        ],
                        "fullName": "PostRepository - Post Creation Performance and Optimization should not make additional database calls after creation",
                        "status": "passed",
                        "title": "should not make additional database calls after creation",
                        "duration": 0.4993999999999801,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Performance and Optimization"
                        ],
                        "fullName": "PostRepository - Post Creation Performance and Optimization should handle concurrent post creation calls",
                        "status": "passed",
                        "title": "should handle concurrent post creation calls",
                        "duration": 0.539799999999957,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Data Validation and Sanitization"
                        ],
                        "fullName": "PostRepository - Post Creation Data Validation and Sanitization should preserve exact content without modification",
                        "status": "passed",
                        "title": "should preserve exact content without modification",
                        "duration": 0.6870000000000118,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Data Validation and Sanitization"
                        ],
                        "fullName": "PostRepository - Post Creation Data Validation and Sanitization should handle date objects correctly",
                        "status": "passed",
                        "title": "should handle date objects correctly",
                        "duration": 0.38749999999998863,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository - Post Creation",
                            "Data Validation and Sanitization"
                        ],
                        "fullName": "PostRepository - Post Creation Data Validation and Sanitization should handle boolean values correctly",
                        "status": "passed",
                        "title": "should handle boolean values correctly",
                        "duration": 0.39929999999998245,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633504437,
                "endTime": 1751633504459.3994,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/repositories/PostRepository.create.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "create()"
                        ],
                        "fullName": "PostRepository create() should create a published post with default values",
                        "status": "passed",
                        "title": "should create a published post with default values",
                        "duration": 6.183499999999981,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "create()"
                        ],
                        "fullName": "PostRepository create() should create a draft post when isPublished is false",
                        "status": "passed",
                        "title": "should create a draft post when isPublished is false",
                        "duration": 2.960999999999956,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "create()"
                        ],
                        "fullName": "PostRepository create() should create a scheduled post",
                        "status": "passed",
                        "title": "should create a scheduled post",
                        "duration": 1.836999999999989,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "create()"
                        ],
                        "fullName": "PostRepository create() should handle content warning and activity ID",
                        "status": "passed",
                        "title": "should handle content warning and activity ID",
                        "duration": 0.5511999999999944,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "findById()"
                        ],
                        "fullName": "PostRepository findById() should find post by ID with full relations",
                        "status": "passed",
                        "title": "should find post by ID with full relations",
                        "duration": 0.6657000000000153,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "findById()"
                        ],
                        "fullName": "PostRepository findById() should return null if post not found",
                        "status": "passed",
                        "title": "should return null if post not found",
                        "duration": 0.27120000000002165,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "findByAuthor()"
                        ],
                        "fullName": "PostRepository findByAuthor() should find posts by author with default pagination",
                        "status": "passed",
                        "title": "should find posts by author with default pagination",
                        "duration": 0.6528999999999883,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "findByAuthor()"
                        ],
                        "fullName": "PostRepository findByAuthor() should apply publishing status filter",
                        "status": "passed",
                        "title": "should apply publishing status filter",
                        "duration": 0.6435000000000173,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "findByAuthor()"
                        ],
                        "fullName": "PostRepository findByAuthor() should handle custom pagination and ordering",
                        "status": "passed",
                        "title": "should handle custom pagination and ordering",
                        "duration": 0.793899999999951,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "findPublished()"
                        ],
                        "fullName": "PostRepository findPublished() should find published posts with default options",
                        "status": "passed",
                        "title": "should find published posts with default options",
                        "duration": 0.7314999999999827,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "findPublished()"
                        ],
                        "fullName": "PostRepository findPublished() should filter by author ID",
                        "status": "passed",
                        "title": "should filter by author ID",
                        "duration": 0.5742000000000189,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "findPublished()"
                        ],
                        "fullName": "PostRepository findPublished() should filter by content warning presence",
                        "status": "passed",
                        "title": "should filter by content warning presence",
                        "duration": 0.8897999999999797,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "findPublished()"
                        ],
                        "fullName": "PostRepository findPublished() should filter by date range",
                        "status": "passed",
                        "title": "should filter by date range",
                        "duration": 0.5532000000000039,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "findReadyToPublish()"
                        ],
                        "fullName": "PostRepository findReadyToPublish() should find expired scheduled posts",
                        "status": "passed",
                        "title": "should find expired scheduled posts",
                        "duration": 0.6165000000000305,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "findScheduled()"
                        ],
                        "fullName": "PostRepository findScheduled() should find future scheduled posts",
                        "status": "passed",
                        "title": "should find future scheduled posts",
                        "duration": 0.7374000000000365,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "findScheduled()"
                        ],
                        "fullName": "PostRepository findScheduled() should filter by author",
                        "status": "passed",
                        "title": "should filter by author",
                        "duration": 0.5748999999999569,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "update()"
                        ],
                        "fullName": "PostRepository update() should update post content and set updatedAt",
                        "status": "passed",
                        "title": "should update post content and set updatedAt",
                        "duration": 1.5421999999999798,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "update()"
                        ],
                        "fullName": "PostRepository update() should set publishedAt when transitioning to published",
                        "status": "passed",
                        "title": "should set publishedAt when transitioning to published",
                        "duration": 0.848700000000008,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "update()"
                        ],
                        "fullName": "PostRepository update() should not set publishedAt if already published",
                        "status": "passed",
                        "title": "should not set publishedAt if already published",
                        "duration": 0.6257000000000517,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "delete()"
                        ],
                        "fullName": "PostRepository delete() should delete post and return deleted post with media info",
                        "status": "passed",
                        "title": "should delete post and return deleted post with media info",
                        "duration": 0.6621000000000095,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "existsByIdAndAuthor()"
                        ],
                        "fullName": "PostRepository existsByIdAndAuthor() should return true if post exists and belongs to author",
                        "status": "passed",
                        "title": "should return true if post exists and belongs to author",
                        "duration": 0.6021000000000072,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "existsByIdAndAuthor()"
                        ],
                        "fullName": "PostRepository existsByIdAndAuthor() should return false if post does not exist or belongs to different author",
                        "status": "passed",
                        "title": "should return false if post does not exist or belongs to different author",
                        "duration": 0.3394000000000119,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "getAuthorStats()"
                        ],
                        "fullName": "PostRepository getAuthorStats() should return comprehensive post statistics for author",
                        "status": "passed",
                        "title": "should return comprehensive post statistics for author",
                        "duration": 1.1433000000000106,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "findByActivityId()"
                        ],
                        "fullName": "PostRepository findByActivityId() should find post by ActivityPub activity ID",
                        "status": "passed",
                        "title": "should find post by ActivityPub activity ID",
                        "duration": 0.44549999999998136,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "publishExpiredScheduled()"
                        ],
                        "fullName": "PostRepository publishExpiredScheduled() should batch publish expired scheduled posts",
                        "status": "passed",
                        "title": "should batch publish expired scheduled posts",
                        "duration": 0.9139999999999873,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "publishExpiredScheduled()"
                        ],
                        "fullName": "PostRepository publishExpiredScheduled() should return empty array if no expired posts",
                        "status": "passed",
                        "title": "should return empty array if no expired posts",
                        "duration": 0.46359999999998536,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "PostRepository",
                            "publishExpiredScheduled()"
                        ],
                        "fullName": "PostRepository publishExpiredScheduled() should use default limit of 50",
                        "status": "passed",
                        "title": "should use default limit of 50",
                        "duration": 0.30939999999998236,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633502598,
                "endTime": 1751633502627.3093,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/repositories/PostRepository.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Successful Authentication"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Successful Authentication should successfully login user with valid credentials",
                        "status": "passed",
                        "title": "should successfully login user with valid credentials",
                        "duration": 43.86430000000007,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Successful Authentication"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Successful Authentication should handle user with different data successfully",
                        "status": "passed",
                        "title": "should handle user with different data successfully",
                        "duration": 5.671299999999974,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Authentication Failures"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Authentication Failures should return 401 for non-existent user",
                        "status": "passed",
                        "title": "should return 401 for non-existent user",
                        "duration": 5.068200000000047,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Authentication Failures"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Authentication Failures should return 401 for incorrect password",
                        "status": "passed",
                        "title": "should return 401 for incorrect password",
                        "duration": 6.699400000000082,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Input Validation"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Input Validation should return 400 for invalid email format",
                        "status": "passed",
                        "title": "should return 400 for invalid email format",
                        "duration": 5.034400000000005,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Input Validation"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Input Validation should return 400 for missing password",
                        "status": "passed",
                        "title": "should return 400 for missing password",
                        "duration": 3.9587999999999965,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Input Validation"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Input Validation should return 400 for missing email",
                        "status": "passed",
                        "title": "should return 400 for missing email",
                        "duration": 5.364800000000059,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Input Validation"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Input Validation should return 400 for empty request body",
                        "status": "passed",
                        "title": "should return 400 for empty request body",
                        "duration": 3.9809999999999945,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Database Errors"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Database Errors should handle database connection errors gracefully",
                        "status": "passed",
                        "title": "should handle database connection errors gracefully",
                        "duration": 7.503900000000044,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Database Errors"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Database Errors should handle AuthService errors gracefully",
                        "status": "passed",
                        "title": "should handle AuthService errors gracefully",
                        "duration": 5.654699999999934,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Database Errors"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Database Errors should return 500 for token generation errors",
                        "status": "passed",
                        "title": "should return 500 for token generation errors",
                        "duration": 5.245100000000093,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Edge Cases"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Edge Cases should handle case-sensitive email matching",
                        "status": "passed",
                        "title": "should handle case-sensitive email matching",
                        "duration": 3.5704999999999245,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Edge Cases"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Edge Cases should handle very long email addresses",
                        "status": "passed",
                        "title": "should handle very long email addresses",
                        "duration": 3.5038000000000693,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Edge Cases"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Edge Cases should handle user with null optional fields",
                        "status": "passed",
                        "title": "should handle user with null optional fields",
                        "duration": 6.3472000000000435,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Content-Type Handling"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Content-Type Handling should require JSON content type",
                        "status": "passed",
                        "title": "should require JSON content type",
                        "duration": 3.7316000000000713,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "POST /auth/login - Content-Type Handling"
                        ],
                        "fullName": "Authentication Routes - User Login POST /auth/login - Content-Type Handling should handle malformed JSON gracefully",
                        "status": "passed",
                        "title": "should handle malformed JSON gracefully",
                        "duration": 7.3221999999999525,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "Security and Rate Limiting Tests"
                        ],
                        "fullName": "Authentication Routes - User Login Security and Rate Limiting Tests should not reveal whether email exists in error messages",
                        "status": "passed",
                        "title": "should not reveal whether email exists in error messages",
                        "duration": 9.603399999999965,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Authentication Routes - User Login",
                            "Security and Rate Limiting Tests"
                        ],
                        "fullName": "Authentication Routes - User Login Security and Rate Limiting Tests should handle concurrent login attempts",
                        "status": "passed",
                        "title": "should handle concurrent login attempts",
                        "duration": 13.82490000000007,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633503973,
                "endTime": 1751633504120.825,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/routes/authLogin.test.ts"
            },
            {
                "assertionResults": [],
                "startTime": 1751633501321,
                "endTime": 1751633501321,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/routes/authRegistration.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Successful Follow Operations"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Successful Follow Operations should successfully follow a user with valid authentication",
                        "status": "passed",
                        "title": "should successfully follow a user with valid authentication",
                        "duration": 26.64949999999999,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Successful Follow Operations"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Successful Follow Operations should successfully follow a user as external ActivityPub actor",
                        "status": "passed",
                        "title": "should successfully follow a user as external ActivityPub actor",
                        "duration": 16.59730000000002,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Successful Follow Operations"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Successful Follow Operations should successfully unfollow a user",
                        "status": "passed",
                        "title": "should successfully unfollow a user",
                        "duration": 4.819599999999923,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Authentication Scenarios"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Authentication Scenarios should allow follow without authentication if actorId provided",
                        "status": "passed",
                        "title": "should allow follow without authentication if actorId provided",
                        "duration": 5.1327,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Authentication Scenarios"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Authentication Scenarios should reject follow without authentication and without actorId",
                        "status": "passed",
                        "title": "should reject follow without authentication and without actorId",
                        "duration": 4.52660000000003,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Authentication Scenarios"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Authentication Scenarios should require authentication for unfollow operations",
                        "status": "passed",
                        "title": "should require authentication for unfollow operations",
                        "duration": 4.524700000000053,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Authentication Scenarios"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Authentication Scenarios should reject invalid authentication tokens",
                        "status": "passed",
                        "title": "should reject invalid authentication tokens",
                        "duration": 3.4272000000000844,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Error Scenarios"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Error Scenarios should return 404 when target user not found",
                        "status": "passed",
                        "title": "should return 404 when target user not found",
                        "duration": 3.8646999999999707,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Error Scenarios"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Error Scenarios should return 409 when already following user",
                        "status": "passed",
                        "title": "should return 409 when already following user",
                        "duration": 5.953300000000013,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Error Scenarios"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Error Scenarios should return 409 when trying to follow yourself",
                        "status": "passed",
                        "title": "should return 409 when trying to follow yourself",
                        "duration": 4.3286999999999125,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Error Scenarios"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Error Scenarios should return 403 when user has blocked the follower",
                        "status": "passed",
                        "title": "should return 403 when user has blocked the follower",
                        "duration": 3.399599999999964,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Error Scenarios"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Error Scenarios should handle malformed username parameters",
                        "status": "passed",
                        "title": "should handle malformed username parameters",
                        "duration": 3.2128999999999905,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Parameter Handling"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Parameter Handling should pass username parameter correctly to controller",
                        "status": "passed",
                        "title": "should pass username parameter correctly to controller",
                        "duration": 3.2469999999999573,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Parameter Handling"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Parameter Handling should pass request body correctly to controller",
                        "status": "passed",
                        "title": "should pass request body correctly to controller",
                        "duration": 5.594699999999989,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Parameter Handling"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Parameter Handling should preserve user information from authentication middleware",
                        "status": "passed",
                        "title": "should preserve user information from authentication middleware",
                        "duration": 5.0709000000000515,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "HTTP Methods and Endpoints"
                        ],
                        "fullName": "Follow Requests End-to-End Tests HTTP Methods and Endpoints should handle GET requests to followers endpoint",
                        "status": "passed",
                        "title": "should handle GET requests to followers endpoint",
                        "duration": 6.384500000000003,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "HTTP Methods and Endpoints"
                        ],
                        "fullName": "Follow Requests End-to-End Tests HTTP Methods and Endpoints should handle GET requests to following endpoint",
                        "status": "passed",
                        "title": "should handle GET requests to following endpoint",
                        "duration": 4.500999999999976,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "HTTP Methods and Endpoints"
                        ],
                        "fullName": "Follow Requests End-to-End Tests HTTP Methods and Endpoints should handle GET requests to stats endpoint",
                        "status": "passed",
                        "title": "should handle GET requests to stats endpoint",
                        "duration": 5.003600000000006,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Edge Cases"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Edge Cases should handle very long usernames",
                        "status": "passed",
                        "title": "should handle very long usernames",
                        "duration": 3.0219999999999345,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Edge Cases"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Edge Cases should handle special characters in usernames",
                        "status": "passed",
                        "title": "should handle special characters in usernames",
                        "duration": 2.982399999999984,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "Follow Requests End-to-End Tests",
                            "Edge Cases"
                        ],
                        "fullName": "Follow Requests End-to-End Tests Edge Cases should handle concurrent follow requests gracefully",
                        "status": "passed",
                        "title": "should handle concurrent follow requests gracefully",
                        "duration": 10.114199999999983,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633503694,
                "endTime": 1751633503828.1143,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/routes/follow.requests.e2e.test.ts"
            },
            {
                "assertionResults": [],
                "startTime": 1751633501321,
                "endTime": 1751633501321,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/routes/users.router.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Constructor"
                        ],
                        "fullName": "AuthService Constructor should create AuthService with default expiration",
                        "status": "passed",
                        "title": "should create AuthService with default expiration",
                        "duration": 2.8076000000000363,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Constructor"
                        ],
                        "fullName": "AuthService Constructor should create AuthService with custom expiration",
                        "status": "passed",
                        "title": "should create AuthService with custom expiration",
                        "duration": 0.5493000000000166,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Password Hashing",
                            "hashPassword"
                        ],
                        "fullName": "AuthService Password Hashing hashPassword should hash a password successfully",
                        "status": "passed",
                        "title": "should hash a password successfully",
                        "duration": 227.53380000000004,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Password Hashing",
                            "hashPassword"
                        ],
                        "fullName": "AuthService Password Hashing hashPassword should produce different hashes for the same password",
                        "status": "passed",
                        "title": "should produce different hashes for the same password",
                        "duration": 448.68399999999997,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Password Hashing",
                            "hashPassword"
                        ],
                        "fullName": "AuthService Password Hashing hashPassword should handle different password lengths",
                        "status": "pending",
                        "title": "should handle different password lengths",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Password Hashing",
                            "hashPassword"
                        ],
                        "fullName": "AuthService Password Hashing hashPassword should handle passwords with special characters",
                        "status": "pending",
                        "title": "should handle passwords with special characters",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Password Hashing",
                            "hashPassword"
                        ],
                        "fullName": "AuthService Password Hashing hashPassword should handle unicode characters in passwords",
                        "status": "pending",
                        "title": "should handle unicode characters in passwords",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Password Hashing",
                            "hashPassword"
                        ],
                        "fullName": "AuthService Password Hashing hashPassword should throw error for null password",
                        "status": "pending",
                        "title": "should throw error for null password",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Password Hashing",
                            "hashPassword"
                        ],
                        "fullName": "AuthService Password Hashing hashPassword should throw error for undefined password",
                        "status": "pending",
                        "title": "should throw error for undefined password",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Password Hashing",
                            "verifyPassword"
                        ],
                        "fullName": "AuthService Password Hashing verifyPassword should verify correct password",
                        "status": "pending",
                        "title": "should verify correct password",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Password Hashing",
                            "verifyPassword"
                        ],
                        "fullName": "AuthService Password Hashing verifyPassword should reject incorrect password",
                        "status": "pending",
                        "title": "should reject incorrect password",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Password Hashing",
                            "verifyPassword"
                        ],
                        "fullName": "AuthService Password Hashing verifyPassword should reject password with different case",
                        "status": "pending",
                        "title": "should reject password with different case",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Password Hashing",
                            "verifyPassword"
                        ],
                        "fullName": "AuthService Password Hashing verifyPassword should handle empty string password verification",
                        "status": "pending",
                        "title": "should handle empty string password verification",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Password Hashing",
                            "verifyPassword"
                        ],
                        "fullName": "AuthService Password Hashing verifyPassword should handle special characters in verification",
                        "status": "pending",
                        "title": "should handle special characters in verification",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Password Hashing",
                            "verifyPassword"
                        ],
                        "fullName": "AuthService Password Hashing verifyPassword should throw error for invalid hash format",
                        "status": "pending",
                        "title": "should throw error for invalid hash format",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Password Hashing",
                            "verifyPassword"
                        ],
                        "fullName": "AuthService Password Hashing verifyPassword should throw error for null hash",
                        "status": "pending",
                        "title": "should throw error for null hash",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Password Hashing",
                            "verifyPassword"
                        ],
                        "fullName": "AuthService Password Hashing verifyPassword should throw error for null password",
                        "status": "pending",
                        "title": "should throw error for null password",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "JWT Token Management",
                            "generateToken"
                        ],
                        "fullName": "AuthService JWT Token Management generateToken should generate a valid JWT token",
                        "status": "pending",
                        "title": "should generate a valid JWT token",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "JWT Token Management",
                            "generateToken"
                        ],
                        "fullName": "AuthService JWT Token Management generateToken should generate different tokens for different users",
                        "status": "pending",
                        "title": "should generate different tokens for different users",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "JWT Token Management",
                            "generateToken"
                        ],
                        "fullName": "AuthService JWT Token Management generateToken should include user data in token payload",
                        "status": "pending",
                        "title": "should include user data in token payload",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "JWT Token Management",
                            "verifyToken"
                        ],
                        "fullName": "AuthService JWT Token Management verifyToken should verify a valid token",
                        "status": "pending",
                        "title": "should verify a valid token",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "JWT Token Management",
                            "verifyToken"
                        ],
                        "fullName": "AuthService JWT Token Management verifyToken should throw error for invalid token",
                        "status": "pending",
                        "title": "should throw error for invalid token",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "JWT Token Management",
                            "verifyToken"
                        ],
                        "fullName": "AuthService JWT Token Management verifyToken should throw error for empty token",
                        "status": "pending",
                        "title": "should throw error for empty token",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "JWT Token Management",
                            "verifyToken"
                        ],
                        "fullName": "AuthService JWT Token Management verifyToken should throw error for null token",
                        "status": "pending",
                        "title": "should throw error for null token",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "JWT Token Management",
                            "extractTokenFromHeader"
                        ],
                        "fullName": "AuthService JWT Token Management extractTokenFromHeader should extract token from Bearer header",
                        "status": "pending",
                        "title": "should extract token from Bearer header",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "JWT Token Management",
                            "extractTokenFromHeader"
                        ],
                        "fullName": "AuthService JWT Token Management extractTokenFromHeader should throw error for invalid header format",
                        "status": "pending",
                        "title": "should throw error for invalid header format",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "JWT Token Management",
                            "extractTokenFromHeader"
                        ],
                        "fullName": "AuthService JWT Token Management extractTokenFromHeader should throw error for undefined header",
                        "status": "pending",
                        "title": "should throw error for undefined header",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "JWT Token Management",
                            "extractTokenFromHeader"
                        ],
                        "fullName": "AuthService JWT Token Management extractTokenFromHeader should throw error for empty header",
                        "status": "pending",
                        "title": "should throw error for empty header",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Data Validation",
                            "validateRegistrationData"
                        ],
                        "fullName": "AuthService Data Validation validateRegistrationData should validate correct registration data",
                        "status": "pending",
                        "title": "should validate correct registration data",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Data Validation",
                            "validateRegistrationData"
                        ],
                        "fullName": "AuthService Data Validation validateRegistrationData should reject invalid email",
                        "status": "pending",
                        "title": "should reject invalid email",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Data Validation",
                            "validateRegistrationData"
                        ],
                        "fullName": "AuthService Data Validation validateRegistrationData should reject short password",
                        "status": "pending",
                        "title": "should reject short password",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Data Validation",
                            "validateLoginData"
                        ],
                        "fullName": "AuthService Data Validation validateLoginData should validate correct login data",
                        "status": "pending",
                        "title": "should validate correct login data",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Data Validation",
                            "validateLoginData"
                        ],
                        "fullName": "AuthService Data Validation validateLoginData should reject invalid email",
                        "status": "pending",
                        "title": "should reject invalid email",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Data Validation",
                            "validateLoginData"
                        ],
                        "fullName": "AuthService Data Validation validateLoginData should reject missing password",
                        "status": "pending",
                        "title": "should reject missing password",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Integration Tests"
                        ],
                        "fullName": "AuthService Integration Tests should complete full password hash and verify cycle",
                        "status": "pending",
                        "title": "should complete full password hash and verify cycle",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Integration Tests"
                        ],
                        "fullName": "AuthService Integration Tests should complete full token generation and verification cycle",
                        "status": "pending",
                        "title": "should complete full token generation and verification cycle",
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "AuthService",
                            "Integration Tests"
                        ],
                        "fullName": "AuthService Integration Tests should work with different JWT expiration times",
                        "status": "pending",
                        "title": "should work with different JWT expiration times",
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633504873,
                "endTime": 1751633505552.684,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/services/AuthService.test.ts"
            },
            {
                "assertionResults": [
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "followUser()"
                        ],
                        "fullName": "FollowService Unit Tests followUser() should successfully create follow relationship",
                        "status": "passed",
                        "title": "should successfully create follow relationship",
                        "duration": 5.986599999999953,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "followUser()"
                        ],
                        "fullName": "FollowService Unit Tests followUser() should create ActivityPub federated follow relationship",
                        "status": "passed",
                        "title": "should create ActivityPub federated follow relationship",
                        "duration": 1.0822999999999183,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "followUser()"
                        ],
                        "fullName": "FollowService Unit Tests followUser() should reject self-follow attempts",
                        "status": "passed",
                        "title": "should reject self-follow attempts",
                        "duration": 0.8804999999999836,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "followUser()"
                        ],
                        "fullName": "FollowService Unit Tests followUser() should reject follow when user not found",
                        "status": "passed",
                        "title": "should reject follow when user not found",
                        "duration": 0.5497000000000298,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "followUser()"
                        ],
                        "fullName": "FollowService Unit Tests followUser() should reject follow when user is inactive",
                        "status": "passed",
                        "title": "should reject follow when user is inactive",
                        "duration": 0.8038000000000238,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "followUser()"
                        ],
                        "fullName": "FollowService Unit Tests followUser() should reject follow when already following",
                        "status": "passed",
                        "title": "should reject follow when already following",
                        "duration": 0.7126999999999271,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "followUser()"
                        ],
                        "fullName": "FollowService Unit Tests followUser() should reject invalid ActivityPub actor ID",
                        "status": "passed",
                        "title": "should reject invalid ActivityPub actor ID",
                        "duration": 0.7857999999999947,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "followUser()"
                        ],
                        "fullName": "FollowService Unit Tests followUser() should handle validation errors for invalid input",
                        "status": "passed",
                        "title": "should handle validation errors for invalid input",
                        "duration": 1.1812999999999647,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "unfollowUser()"
                        ],
                        "fullName": "FollowService Unit Tests unfollowUser() should successfully remove follow relationship",
                        "status": "passed",
                        "title": "should successfully remove follow relationship",
                        "duration": 1.6596000000000686,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "unfollowUser()"
                        ],
                        "fullName": "FollowService Unit Tests unfollowUser() should reject unfollow when not following",
                        "status": "passed",
                        "title": "should reject unfollow when not following",
                        "duration": 1.3672000000000253,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "unfollowUser()"
                        ],
                        "fullName": "FollowService Unit Tests unfollowUser() should handle validation errors for invalid input",
                        "status": "passed",
                        "title": "should handle validation errors for invalid input",
                        "duration": 0.7821999999999889,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "getFollowers()"
                        ],
                        "fullName": "FollowService Unit Tests getFollowers() should successfully get followers with default pagination",
                        "status": "passed",
                        "title": "should successfully get followers with default pagination",
                        "duration": 1.133199999999988,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "getFollowers()"
                        ],
                        "fullName": "FollowService Unit Tests getFollowers() should handle custom pagination options",
                        "status": "passed",
                        "title": "should handle custom pagination options",
                        "duration": 1.0050000000001091,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "getFollowers()"
                        ],
                        "fullName": "FollowService Unit Tests getFollowers() should reject when user not found",
                        "status": "passed",
                        "title": "should reject when user not found",
                        "duration": 0.6654999999999518,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "getFollowers()"
                        ],
                        "fullName": "FollowService Unit Tests getFollowers() should handle invalid pagination options",
                        "status": "passed",
                        "title": "should handle invalid pagination options",
                        "duration": 0.8489000000000715,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "getFollowers()"
                        ],
                        "fullName": "FollowService Unit Tests getFollowers() should reject invalid user ID",
                        "status": "passed",
                        "title": "should reject invalid user ID",
                        "duration": 0.5829000000001088,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "getFollowStats()"
                        ],
                        "fullName": "FollowService Unit Tests getFollowStats() should successfully get follow statistics",
                        "status": "passed",
                        "title": "should successfully get follow statistics",
                        "duration": 0.8203999999999496,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "getFollowStats()"
                        ],
                        "fullName": "FollowService Unit Tests getFollowStats() should reject when user not found",
                        "status": "passed",
                        "title": "should reject when user not found",
                        "duration": 1.2726999999999862,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "getFollowStats()"
                        ],
                        "fullName": "FollowService Unit Tests getFollowStats() should reject invalid user ID",
                        "status": "passed",
                        "title": "should reject invalid user ID",
                        "duration": 0.28959999999995034,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "checkFollowStatus()"
                        ],
                        "fullName": "FollowService Unit Tests checkFollowStatus() should successfully check follow status when following",
                        "status": "passed",
                        "title": "should successfully check follow status when following",
                        "duration": 0.3708000000000311,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "checkFollowStatus()"
                        ],
                        "fullName": "FollowService Unit Tests checkFollowStatus() should successfully check follow status when not following",
                        "status": "passed",
                        "title": "should successfully check follow status when not following",
                        "duration": 0.2619000000000824,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "checkFollowStatus()"
                        ],
                        "fullName": "FollowService Unit Tests checkFollowStatus() should reject invalid parameters",
                        "status": "passed",
                        "title": "should reject invalid parameters",
                        "duration": 0.272199999999998,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "bulkCheckFollowing()"
                        ],
                        "fullName": "FollowService Unit Tests bulkCheckFollowing() should successfully perform bulk follow check",
                        "status": "passed",
                        "title": "should successfully perform bulk follow check",
                        "duration": 0.6125999999999294,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "bulkCheckFollowing()"
                        ],
                        "fullName": "FollowService Unit Tests bulkCheckFollowing() should reject when too many users requested",
                        "status": "passed",
                        "title": "should reject when too many users requested",
                        "duration": 0.3706000000000813,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "bulkCheckFollowing()"
                        ],
                        "fullName": "FollowService Unit Tests bulkCheckFollowing() should reject invalid follower ID",
                        "status": "passed",
                        "title": "should reject invalid follower ID",
                        "duration": 0.6335000000000264,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "bulkCheckFollowing()"
                        ],
                        "fullName": "FollowService Unit Tests bulkCheckFollowing() should reject non-array user IDs",
                        "status": "passed",
                        "title": "should reject non-array user IDs",
                        "duration": 0.4963999999999942,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "bulkCheckFollowing()"
                        ],
                        "fullName": "FollowService Unit Tests bulkCheckFollowing() should reject invalid user IDs in array",
                        "status": "passed",
                        "title": "should reject invalid user IDs in array",
                        "duration": 0.3754999999999882,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "getRecentFollowers()"
                        ],
                        "fullName": "FollowService Unit Tests getRecentFollowers() should successfully get recent followers with default limit",
                        "status": "passed",
                        "title": "should successfully get recent followers with default limit",
                        "duration": 0.45040000000005875,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "getRecentFollowers()"
                        ],
                        "fullName": "FollowService Unit Tests getRecentFollowers() should handle custom limit within bounds",
                        "status": "passed",
                        "title": "should handle custom limit within bounds",
                        "duration": 0.27490000000000236,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "getRecentFollowers()"
                        ],
                        "fullName": "FollowService Unit Tests getRecentFollowers() should constrain limit to maximum of 50",
                        "status": "passed",
                        "title": "should constrain limit to maximum of 50",
                        "duration": 0.3953000000000202,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "getRecentFollowers()"
                        ],
                        "fullName": "FollowService Unit Tests getRecentFollowers() should constrain limit to minimum of 1",
                        "status": "passed",
                        "title": "should constrain limit to minimum of 1",
                        "duration": 0.4956999999999425,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "getRecentFollowers()"
                        ],
                        "fullName": "FollowService Unit Tests getRecentFollowers() should reject invalid user ID",
                        "status": "passed",
                        "title": "should reject invalid user ID",
                        "duration": 0.4278000000000475,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "Error Handling"
                        ],
                        "fullName": "FollowService Unit Tests Error Handling should handle repository errors in followUser",
                        "status": "passed",
                        "title": "should handle repository errors in followUser",
                        "duration": 0.6019999999999754,
                        "failureMessages": [],
                        "meta": {}
                    },
                    {
                        "ancestorTitles": [
                            "FollowService Unit Tests",
                            "Error Handling"
                        ],
                        "fullName": "FollowService Unit Tests Error Handling should handle repository errors in getFollowStats",
                        "status": "passed",
                        "title": "should handle repository errors in getFollowStats",
                        "duration": 0.7714999999999463,
                        "failureMessages": [],
                        "meta": {}
                    }
                ],
                "startTime": 1751633502124,
                "endTime": 1751633502154.7715,
                "status": "passed",
                "message": "",
                "name": "C:/Users/Et Al/Documents/GitHub/ParaSocial/backend/__tests__/services/FollowService.test.ts"
            }
        ]
    }