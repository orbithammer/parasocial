// backend/prisma/schema.prisma
// Version: 2.3.0 - Fixed database provider and relation mappings
// Changed: Updated provider to "postgresql" and fixed Follow/Block relation mappings in User model

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Report type enumeration for content moderation
enum ReportType {
  HARASSMENT
  SPAM
  MISINFORMATION
  INAPPROPRIATE_CONTENT
  COPYRIGHT
  OTHER
}

// Report status enumeration for moderation workflow
enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

// ParaSocial user accounts (content creators only)
model User {
  id               String   @id @default(cuid())
  email            String   @unique
  username         String   @unique
  displayName      String?
  bio              String?
  avatar           String?  // URL to avatar image
  website          String?  // Optional website/portfolio link
  passwordHash     String
  isVerified       Boolean  @default(false)
  verificationTier String   @default("none") // none, email, phone, identity, notable
  isActive         Boolean  @default(true)   // For soft account suspension
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // ActivityPub fields for federation
  actorId          String?  @unique // ActivityPub actor URI
  publicKey        String?  // RSA public key for HTTP signatures
  privateKey       String?  // RSA private key (encrypted)
  
  // Relations
  posts            Post[]
  
  // Follow relations - split into followers and following
  followers        Follow[] @relation("FollowedUser")  // Users who follow this user
  following        Follow[] @relation("FollowerUser")  // Users this user follows
  
  // Block relations - split into blocking and blocked
  blocking         Block[]  @relation("BlockingUser") // Users this user blocks
  blockedBy        Block[]  @relation("BlockedUser")  // Users who block this user
  
  // Report relations - users can be reported, submit reports, and moderate reports
  reportsAgainst    Report[] @relation("ReportedUser")
  reportsSubmitted  Report[] @relation("ReporterUser") 
  reportsModerated  Report[] @relation("ModeratorUser")
  
  @@map("users")
}

// Posts created by ParaSocial users
model Post {
  id             String    @id @default(cuid())
  content        String    // Main post content
  contentWarning String?   // Content warning text
  isScheduled    Boolean   @default(false)
  scheduledFor   DateTime? // When to publish scheduled posts
  isPublished    Boolean   @default(true)  // Draft vs published
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  publishedAt    DateTime? // Actual publication time
  
  // ActivityPub fields
  activityId     String?   @unique // ActivityPub activity URI
  objectId       String?   // ActivityPub object URI
  
  // Relations
  authorId       String
  author         User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Report relations - posts can be reported
  reports        Report[]  @relation("ReportedPost")
  
  @@map("posts")
}

// Follow relationships between users
model Follow {
  id          String   @id @default(cuid())
  followerId  String   // User who follows
  followingId String   // User being followed
  createdAt   DateTime @default(now())
  
  // ActivityPub fields
  activityId  String?  @unique // ActivityPub Follow activity URI
  
  // Relations
  follower    User     @relation("FollowerUser", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("FollowedUser", fields: [followingId], references: [id], onDelete: Cascade)
  
  // Prevent self-follows and duplicate follows
  @@unique([followerId, followingId])
  @@map("follows")
}

// Block relationships between users
model Block {
  id        String   @id @default(cuid())
  blockerId String   // User who blocks
  blockedId String   // User being blocked
  reason    String?  // Optional reason for blocking
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  blocker   User     @relation("BlockingUser", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User     @relation("BlockedUser", fields: [blockedId], references: [id], onDelete: Cascade)
  
  // Prevent self-blocks and duplicate blocks
  @@unique([blockerId, blockedId])
  @@map("blocks")
}

// Content moderation reports
model Report {
  id           String       @id @default(cuid())
  type         ReportType
  reason       String       // Detailed reason for the report
  description  String?      // Additional context from reporter
  status       ReportStatus @default(PENDING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  reviewedAt   DateTime?    // When the report was reviewed
  resolvedAt   DateTime?    // When the report was resolved
  
  // Reporter information
  reporterId   String?      // Anonymous reports allowed
  reporter     User?        @relation("ReporterUser", fields: [reporterId], references: [id], onDelete: SetNull)
  
  // What is being reported (union type - exactly one must be set)
  reportedUserId String?    // Report against a user
  reportedUser   User?      @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade)
  
  reportedPostId String?    // Report against a post
  reportedPost   Post?      @relation("ReportedPost", fields: [reportedPostId], references: [id], onDelete: Cascade)
  
  // Moderation information
  moderatorId    String?    // Moderator who handled the report
  moderator      User?      @relation("ModeratorUser", fields: [moderatorId], references: [id], onDelete: SetNull)
  moderatorNotes String?    // Internal notes from moderator
  
  @@map("reports")
}

// backend/prisma/schema.prisma
// Version: 2.3.0